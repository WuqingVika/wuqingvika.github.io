<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wuqingvika|吴里庆庆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wuqingvika.github.io/"/>
  <updated>2017-11-27T12:10:09.957Z</updated>
  <id>https://wuqingvika.github.io/</id>
  
  <author>
    <name>吴庆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>欢迎来到吴庆的博客</title>
    <link href="https://wuqingvika.github.io/2017/11/23/hello-world/"/>
    <id>https://wuqingvika.github.io/2017/11/23/hello-world/</id>
    <published>2017-11-22T16:00:00.000Z</published>
    <updated>2017-11-27T12:10:09.957Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://wuqingvika.github.io/">Wuqingvika’s Blog</a>! 这里书写了我从「从全沾到全栈」开发的成长过程。欢迎您莅临本站，本宝宝还是一个小菜鸟，所以关于博客中有错误的信息还请私信我<a href="https://weibo.com/wuqingvika" target="_blank" rel="noopener">微博</a>一起探讨哦~~<br><a id="more"></a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一篇新的文章"><a href="#创建一篇新的文章" class="headerlink" title="创建一篇新的文章"></a>创建一篇新的文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="发布到网站"><a href="#发布到网站" class="headerlink" title="发布到网站"></a>发布到网站</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://wuqingvika.github.io/&quot;&gt;Wuqingvika’s Blog&lt;/a&gt;! 这里书写了我从「从全沾到全栈」开发的成长过程。欢迎您莅临本站，本宝宝还是一个小菜鸟，所以关于博客中有错误的信息还请私信我&lt;a href=&quot;https://weibo.com/wuqingvika&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微博&lt;/a&gt;一起探讨哦~~&lt;br&gt;
    
    </summary>
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/categories/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/tags/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>【工具】idea下载安装注册使用</title>
    <link href="https://wuqingvika.github.io/2017/11/20/%E8%BF%B7%E4%BD%A0%E5%B0%8F%E6%8A%80%E8%83%BD-idea/"/>
    <id>https://wuqingvika.github.io/2017/11/20/迷你小技能-idea/</id>
    <published>2017-11-20T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.635Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「迷你小技能」第二篇,主要对IntelliJ IDEA安装与使用作一些说明。<br><a id="more"></a></p><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「迷你小技能」第二篇,主要对IntelliJ IDEA安装与使用作一些说明。&lt;br&gt;
    
    </summary>
    
      <category term="迷你小技能" scheme="https://wuqingvika.github.io/categories/%E8%BF%B7%E4%BD%A0%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="IntelliJ IDEA" scheme="https://wuqingvika.github.io/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>【索引】后端开发从基础到进阶</title>
    <link href="https://wuqingvika.github.io/2017/11/20/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://wuqingvika.github.io/2017/11/20/后端开发/</id>
    <published>2017-11-20T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.778Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这篇文章汇总了本站中所有与「Java」「Spring」有关的博文。<strong>按照学习路线由浅入深排序</strong>，大家可以根据需求点击阅读。<font color="red">【本文长期更新】</font></p><a id="more"></a><h2 id="核心知识"><a href="#核心知识" class="headerlink" title="核心知识"></a>核心知识</h2><h3 id="二、Java"><a href="#二、Java" class="headerlink" title="二、Java"></a>二、Java</h3><ul><li><a href="https://wuqingvika.github.io/2016/06/20/后端开发-java-1/">【笔记】Java基础知识(一)「文件基本操作」</a></li></ul><h3 id="二、Spring"><a href="#二、Spring" class="headerlink" title="二、Spring"></a>二、Spring</h3><ul><li><a href="https://wuqingvika.github.io/2016/06/20/后端开发-spring-1/">【笔记】Spring入门篇（一）了解spring</a></li><li><a href="https://wuqingvika.github.io/2016/06/20/后端开发-spring-2/">【笔记】Spring入门篇（二）spring代理设置</a></li></ul><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章汇总了本站中所有与「Java」「Spring」有关的博文。&lt;strong&gt;按照学习路线由浅入深排序&lt;/strong&gt;，大家可以根据需求点击阅读。&lt;font color=&quot;red&quot;&gt;【本文长期更新】&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/categories/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/tags/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Nginx(二)基础篇之在「Linux」上搭建一个集群</title>
    <link href="https://wuqingvika.github.io/2017/11/20/%E8%BF%90%E7%BB%B4&amp;%E6%B5%8B%E8%AF%95-nginx-2/"/>
    <id>https://wuqingvika.github.io/2017/11/20/运维&amp;测试-nginx-2/</id>
    <published>2017-11-20T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.546Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Nginx学习笔记」第一篇,主要介绍了如何在window上搭建一个集群。<br><a id="more"></a></p><h2 id="Nginx在windows上搭建集群"><a href="#Nginx在windows上搭建集群" class="headerlink" title="Nginx在windows上搭建集群"></a>Nginx在windows上搭建集群</h2><ul><li>1.先将 nginx上传到linux上</li><li>2.解压nginx</li><li><p>3.先编译nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装依赖包</span><br><span class="line">         yum install gcc-c++</span><br><span class="line">         yum install -y pcre pcre-devel</span><br><span class="line">         yum install -y zlib zlib-devel</span><br><span class="line">         yum install -y openssl openssl-devel</span><br><span class="line">执行编译</span><br><span class="line">         先进入 nginx的目录</span><br><span class="line">         执行</span><br><span class="line">             ./configure</span><br></pre></td></tr></table></figure></li><li><p>4.安装nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    执行 </span><br><span class="line">           make</span><br><span class="line">           make install</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 5.启动nginx</span><br><span class="line">  ``` bash</span><br><span class="line">        <span class="built_in">cd</span> nginx目录下</span><br><span class="line">                配置文件 conf</span><br><span class="line">                启动nginx </span><br><span class="line">                    ./nginx</span><br><span class="line">  ``` </span><br><span class="line">- 6.将端口号80 放行</span><br><span class="line">  ``` bash</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">将该设置添加到防火墙的规则中</span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure></li><li><p>7.修改conf文件 和window下一样</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">配置集群</span><br></pre></td></tr></table></figure><ul><li>可以参考<a href="https://wuqingvika.github.io/2017/11/20/运维&amp;测试-nginx-1/">【笔记】Nginx(一)基础篇之在「Windows」上搭建一个集群</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Nginx学习笔记」第一篇,主要介绍了如何在window上搭建一个集群。&lt;br&gt;
    
    </summary>
    
      <category term="运维&amp;测试" scheme="https://wuqingvika.github.io/categories/%E8%BF%90%E7%BB%B4-%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Nginx" scheme="https://wuqingvika.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Linux(二)基础篇之「在Linux发布一个简单的web项目」</title>
    <link href="https://wuqingvika.github.io/2017/11/20/%E8%BF%90%E7%BB%B4&amp;%E6%B5%8B%E8%AF%95-linux-2/"/>
    <id>https://wuqingvika.github.io/2017/11/20/运维&amp;测试-linux-2/</id>
    <published>2017-11-20T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.955Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Linux学习笔记」第二篇,主要学习了如何在Linux发布一个web项目(包括：安装Jdk、安装Mysql、安装Tomcat、发布项目直至访问成功)。<br><a id="more"></a></p><h2 id="在linux发布一个简单的Web项目"><a href="#在linux发布一个简单的Web项目" class="headerlink" title="在linux发布一个简单的Web项目"></a>在linux发布一个简单的Web项目</h2><h3 id="1-安装jdk"><a href="#1-安装jdk" class="headerlink" title="1.安装jdk:"></a>1.安装jdk:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a.检测是否安装了jdk  运行java -version</span><br><span class="line">b.若有需要将其卸载</span><br><span class="line">c.查看安装那些jdk</span><br><span class="line">       rpm -qa | grep java</span><br><span class="line">d.卸载</span><br><span class="line">     先卸载 openjdk <span class="number">1.7</span></span><br><span class="line">           rpm -e --nodeps 卸载的包</span><br><span class="line">            rpm -e --nodeps java-<span class="number">1.7</span>.0-openjdk-<span class="number">1.7</span>.0.45-<span class="number">2.4</span>.3.3.el6.i686</span><br><span class="line">     再卸载 openjdk <span class="number">1.6</span></span><br><span class="line">               rpm -e --nodeps java-<span class="number">1.6</span>.0-openjdk-<span class="number">1.6</span>.0.0-<span class="number">1.66</span>.1.13.0.el6.i686</span><br><span class="line">e.安装jdk</span><br><span class="line">           上传jdk 通过ftp软件上传(上传到root目录下)</span><br><span class="line">           在 /usr/local创建一个 java目录</span><br><span class="line">               mkdir java</span><br><span class="line">           将上传的jdk复制到 java目录下</span><br><span class="line">               cp /root/jdk.xxxxx.tar /usr/local/java</span><br><span class="line">           将其解压</span><br><span class="line">               tar -xvf jdk.xxx.tar</span><br><span class="line">f.安装依赖</span><br><span class="line">           yum install glibc.i686</span><br><span class="line">g.配置环境变量</span><br><span class="line">      编辑  vi /etc/profile</span><br><span class="line">      在文件最后添加一下信息</span><br><span class="line">          #set java environment</span><br><span class="line">           JAVA_HOME=/usr/local/java/jdk1.7.0_72</span><br><span class="line">           CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line">           PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">           export JAVA_HOME CLASSPATH PATH</span><br><span class="line">           保存退出</span><br><span class="line">           source /etc/profile  使更改的配置立即生效</span><br></pre></td></tr></table></figure><h3 id="2-安装Mysql"><a href="#2-安装Mysql" class="headerlink" title="2.安装Mysql:"></a>2.安装Mysql:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">        a.检测是否安装了mysql</span><br><span class="line">            rpm  -qa | grep mysql</span><br><span class="line">        b.卸载系统自带的mysql</span><br><span class="line">            rpm -e --nodeps 卸载的包</span><br><span class="line">            rpm -e --nodeps mysql-libs-5.1.71-1.el6.i686 </span><br><span class="line">        c.上传mysql</span><br><span class="line">        d.在 /usr/<span class="built_in">local</span>/ 创建一个mysql</span><br><span class="line">        e.复制mysql 到 mysql目录下</span><br><span class="line">        f.解压 tar</span><br><span class="line">            会有几个rpm文件</span><br><span class="line">        g.安装</span><br><span class="line">            安装mysql的服务器端</span><br><span class="line">                rpm -ivh MySQL-server-5.5.49-1.linux2.6.i386.rpm</span><br><span class="line">                注意:第一次登录mysql的时候没有不需要密码的 以后都需要</span><br><span class="line">            安装mysql的客户端</span><br><span class="line">                rpm -ivh MySQL-client-5.5.49-1.linux2.6.i386.rpm</span><br><span class="line">        h.查看mysql的服务状态</span><br><span class="line">            service mysql status </span><br><span class="line">          启动 mysql</span><br><span class="line">            service mysql start</span><br><span class="line">          停止mysql</span><br><span class="line">            service mysql stop</span><br><span class="line">            </span><br><span class="line">        i.修改mysql的root的密码</span><br><span class="line">            登录:mysql -uroot</span><br><span class="line">            修改密码:</span><br><span class="line">                use mysql;</span><br><span class="line">                update user <span class="built_in">set</span> password = password(<span class="string">'123456'</span>) <span class="built_in">where</span> user = <span class="string">'root'</span>;</span><br><span class="line">                flush privileges;<span class="comment"># 刷新</span></span><br><span class="line">        j.开启远程访问</span><br><span class="line">            grant all privileges on *.* to <span class="string">'root'</span> @<span class="string">'%'</span> identified by <span class="string">'1234'</span>;</span><br><span class="line">            flush privileges;</span><br><span class="line">        k.开启防火墙端口 3306 退出mysql</span><br><span class="line">            3306端口放行 </span><br><span class="line">            /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span><br><span class="line">            将该设置添加到防火墙的规则中</span><br><span class="line">            /etc/rc.d/init.d/iptables save</span><br><span class="line">        l:设置mysql的服务随着系统的启动而启动</span><br><span class="line">            加入到系统服务：</span><br><span class="line">            chkconfig --add mysql</span><br><span class="line">            自动启动：</span><br><span class="line">            chkconfig mysql on</span><br><span class="line">``` </span><br><span class="line"><span class="comment">### 3.安装tomcat</span></span><br><span class="line">``` bash</span><br><span class="line">        a.在/usr/<span class="built_in">local</span>/创建tomcat目录</span><br><span class="line">        b.复制tomcat 到 /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">        c.解压tomcat</span><br><span class="line">        d.启动tomcat 进入 bin</span><br><span class="line">            方式1:</span><br><span class="line">                sh startup.sh</span><br><span class="line">            方式2:</span><br><span class="line">                ./startup.sh</span><br><span class="line">        e.开启端口号 8080</span><br><span class="line">            8080端口放行 </span><br><span class="line">            /sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">            将该设置添加到防火墙的规则中</span><br><span class="line">            /etc/rc.d/init.d/iptables save</span><br><span class="line">            </span><br><span class="line">        注意:</span><br><span class="line">            查看日志文件</span><br><span class="line">                tail -f logs/catalina.out</span><br><span class="line">            退出 ctrl+c</span><br></pre></td></tr></table></figure><h3 id="4-发布项目"><a href="#4-发布项目" class="headerlink" title="4.发布项目"></a>4.发布项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a.数据库和表</span><br><span class="line">        备份dbgirl的数据库</span><br><span class="line">        在windows下</span><br><span class="line">            mysqldump -uroot -p1234 dbgirl &gt; d:/dbgirl1103.sql</span><br><span class="line">        将dbgirl1103.sql上传 root目录</span><br><span class="line">        通过远程工具还原数据库</span><br><span class="line">            先登录mysql</span><br><span class="line">            创建数据库 dbgirl</span><br><span class="line">            进入dbgirl</span><br><span class="line">                <span class="built_in">source</span> /root/dbgirl1103.sql</span><br><span class="line">        </span><br><span class="line">b.项目</span><br><span class="line">        将项目打包 war</span><br><span class="line">        war包的特点:</span><br><span class="line">            在tomcat/webapps目录下 只要tomcat启动 war会自动解压</span><br><span class="line">        将dbgirl.war上传到虚拟机的root目录下</span><br><span class="line">        将dbgirl.war移动到tomcat/webapps下即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Linux学习笔记」第二篇,主要学习了如何在Linux发布一个web项目(包括：安装Jdk、安装Mysql、安装Tomcat、发布项目直至访问成功)。&lt;br&gt;
    
    </summary>
    
      <category term="运维&amp;测试" scheme="https://wuqingvika.github.io/categories/%E8%BF%90%E7%BB%B4-%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Linux" scheme="https://wuqingvika.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Nginx(一)基础篇之在「Windows」上搭建一个集群</title>
    <link href="https://wuqingvika.github.io/2017/11/20/%E8%BF%90%E7%BB%B4&amp;%E6%B5%8B%E8%AF%95-nginx-1/"/>
    <id>https://wuqingvika.github.io/2017/11/20/运维&amp;测试-nginx-1/</id>
    <published>2017-11-20T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.850Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Nginx学习笔记」第一篇,主要介绍了Nginx相关特点以及如何在window上搭建一个集群。<br><a id="more"></a></p><h2 id="Nginx介绍："><a href="#Nginx介绍：" class="headerlink" title="Nginx介绍："></a>Nginx介绍：</h2><ul><li>是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器<h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3></li></ul><ul><li><p>反向代理 :</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">        先来了解正向代理:需要我们用户,手动的设置代理服务器的ip和端口号</span><br><span class="line">反向代理:代理服务器的,用户不需要设置.</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 负载均衡:</span><br><span class="line">``` bash </span><br><span class="line">原理就是数据流量分摊到多个服务器上执行，减轻每台服务器的压力，</span><br><span class="line">多台服务器共同完成工作任务，从而提高了数据的吞吐量。</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 动静分离:</span><br><span class="line">``` bash </span><br><span class="line">将静态的资源放到反向服务器,节省用户的访问时间.</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">## Nginx在windows上搭建集群</span></span><br><span class="line">- 1.在g盘新建两个目录 tomcat1 tomcat2</span><br><span class="line">- 2.修改tomcat2的端口 在tomcat1的端口上+10</span><br><span class="line">- 3.解压nginx</span><br><span class="line">``` bash</span><br><span class="line">            修改nginx的 nginx.conf文件</span><br><span class="line">            在locatioin / 下添加了反向代理</span><br><span class="line">                proxy_pass 代理服务器</span><br><span class="line">            这里只是代理一台服务器</span><br></pre></td></tr></table></figure></li><li><p>4.代理集群</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">            需要在http节点上添加一个</span><br><span class="line">                upstream server_wq&#123;</span><br><span class="line">                    server 127.0.0.1:8080;</span><br><span class="line">                    server 127.0.0.1:8090;</span><br><span class="line">                &#125;</span><br><span class="line">            修改location /下的反向代理 </span><br><span class="line">                proxy_pass http://server_wq</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 5.session共享问题</span><br><span class="line">  -  解决方式1:只能在window下好使</span><br><span class="line">  ``` bash</span><br><span class="line">         web服务器解决(广播机制)</span><br><span class="line">                注意:tomcat下性能低</span><br><span class="line">                修改两个地方:</span><br><span class="line">                    1.修改tomcat的server.xml 支持共享</span><br><span class="line">                        将 引擎标签下的 </span><br><span class="line">                            &lt;Cluster className=<span class="string">"org.apache.catalina.ha.tcp.SimpleTcpCluster"</span>/&gt;</span><br><span class="line">                        注释去掉</span><br><span class="line">                    2.修改项目的配置文件 web.xml中添加一个节点&lt;distributable/&gt; </span><br><span class="line">  ``` </span><br><span class="line">  -  解决方式2:</span><br><span class="line">  ``` bash</span><br><span class="line">   可以将session的id放入redis中</span><br></pre></td></tr></table></figure><ul><li>解决方式3:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">保证一个ip地址永远的访问一台web服务器,就不存在session共享问题了,在linux</span><br><span class="line">在nginx的配置文件中</span><br><span class="line">upstream中添加 ip_hash;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Nginx学习笔记」第一篇,主要介绍了Nginx相关特点以及如何在window上搭建一个集群。&lt;br&gt;
    
    </summary>
    
      <category term="运维&amp;测试" scheme="https://wuqingvika.github.io/categories/%E8%BF%90%E7%BB%B4-%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Nginx" scheme="https://wuqingvika.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>【索引】运维&amp;测试从基础到进阶</title>
    <link href="https://wuqingvika.github.io/2017/11/19/%E8%BF%90%E7%BB%B4&amp;%E6%B5%8B%E8%AF%95/"/>
    <id>https://wuqingvika.github.io/2017/11/19/运维&amp;测试/</id>
    <published>2017-11-19T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.806Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这篇文章汇总了本站中所有与「Linux」「Nginx」有关的博文。<strong>按照学习路线由浅入深排序</strong>，大家可以根据需求点击阅读。<font color="red">【本文长期更新】</font></p><a id="more"></a><h2 id="核心知识"><a href="#核心知识" class="headerlink" title="核心知识"></a>核心知识</h2><h3 id="一、Linux篇"><a href="#一、Linux篇" class="headerlink" title="一、Linux篇"></a>一、Linux篇</h3><ul><li><a href="https://wuqingvika.github.io/2017/11/19/运维&amp;测试-linux-1/">【笔记】Linux(一)基础篇之「命令学习」</a></li><li><a href="https://wuqingvika.github.io/2017/11/20/运维&amp;测试-linux-2/">【笔记】Linux(二)基础篇之「在Linux发布一个简单的web项目」</a><h3 id="二、Nginx篇"><a href="#二、Nginx篇" class="headerlink" title="二、Nginx篇"></a>二、Nginx篇</h3></li><li><a href="https://wuqingvika.github.io/2017/11/20/运维&amp;测试-nginx-1/">【笔记】Nginx(一)基础篇之在「Windows」上搭建一个集群</a></li><li><a href="https://wuqingvika.github.io/2017/11/20/运维&amp;测试-nginx-2/">【笔记】Nginx(二)基础篇之在「Linux」上搭建一个集群</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章汇总了本站中所有与「Linux」「Nginx」有关的博文。&lt;strong&gt;按照学习路线由浅入深排序&lt;/strong&gt;，大家可以根据需求点击阅读。&lt;font color=&quot;red&quot;&gt;【本文长期更新】&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/categories/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/tags/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Bootstrap基础篇（一）test1</title>
    <link href="https://wuqingvika.github.io/2017/11/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-bootstrap-1/"/>
    <id>https://wuqingvika.github.io/2017/11/19/前端开发-bootstrap-1/</id>
    <published>2017-11-19T13:18:25.000Z</published>
    <updated>2017-11-28T13:19:08.200Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Bootstrap学习笔记」第一篇。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Bootstrap学习笔记」第一篇。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://wuqingvika.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Bootstrap" scheme="https://wuqingvika.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Bootstrap基础篇（二）test2</title>
    <link href="https://wuqingvika.github.io/2017/11/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-bootstrap-2/"/>
    <id>https://wuqingvika.github.io/2017/11/19/前端开发-bootstrap-2/</id>
    <published>2017-11-19T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.746Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Bootstrap学习笔记」第二篇。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Bootstrap学习笔记」第二篇。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://wuqingvika.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Bootstrap" scheme="https://wuqingvika.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>【索引】你值得拥有的一些迷你小技能</title>
    <link href="https://wuqingvika.github.io/2017/11/19/%E8%BF%B7%E4%BD%A0%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    <id>https://wuqingvika.github.io/2017/11/19/迷你小技能/</id>
    <published>2017-11-19T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.600Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这篇文章汇总了本站中所有与「小技能」、常用工具下载安装有关的博文。<strong>按照学习路线由浅入深排序</strong>，大家可以根据需求点击阅读。<font color="red">【本文长期更新】</font><br><a id="more"></a></p><h2 id="核心篇"><a href="#核心篇" class="headerlink" title="核心篇"></a>核心篇</h2><h3 id="一、XX-Net下载与安装"><a href="#一、XX-Net下载与安装" class="headerlink" title="一、XX-Net下载与安装"></a>一、XX-Net下载与安装</h3><ul><li><a href="https://wuqingvika.github.io/2017/11/19/迷你小技能-XX-Net/">【工具】XX-Net「带你出去看看」</a></li></ul><h3 id="二、idea下载与安装"><a href="#二、idea下载与安装" class="headerlink" title="二、idea下载与安装"></a>二、idea下载与安装</h3><ul><li><a href="https://wuqingvika.github.io/2017/11/20/迷你小技能-idea/">【工具】idea下载安装注册使用</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章汇总了本站中所有与「小技能」、常用工具下载安装有关的博文。&lt;strong&gt;按照学习路线由浅入深排序&lt;/strong&gt;，大家可以根据需求点击阅读。&lt;font color=&quot;red&quot;&gt;【本文长期更新】&lt;/font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/categories/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/tags/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>【工具】XX-Net「带你出去看看」</title>
    <link href="https://wuqingvika.github.io/2017/11/19/%E8%BF%B7%E4%BD%A0%E5%B0%8F%E6%8A%80%E8%83%BD-XX-Net/"/>
    <id>https://wuqingvika.github.io/2017/11/19/迷你小技能-XX-Net/</id>
    <published>2017-11-19T13:18:25.000Z</published>
    <updated>2017-11-28T14:51:17.328Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「迷你小技能」第一篇,主要作一些技能知识的扩充，你懂的。</p><a id="more"></a><h2 id="XX-Net"><a href="#XX-Net" class="headerlink" title="XX-Net"></a>XX-Net</h2><h3 id="首先去Github下载"><a href="#首先去Github下载" class="headerlink" title="首先去Github下载"></a><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">首先去Github下载</a><br></h3><h3 id="解压到本地-双击运行start-vbs"><a href="#解压到本地-双击运行start-vbs" class="headerlink" title="解压到本地 双击运行start.vbs"></a>解压到本地 双击运行start.vbs</h3><p><img src="https://wuqingvika.github.io/img/迷你小技能-XX-Net/171119-1.jpg" alt=""></p><h3 id="高级-gt-开启ipv6"><a href="#高级-gt-开启ipv6" class="headerlink" title="高级-&gt;开启ipv6"></a>高级-&gt;开启ipv6</h3><p><img src="https://wuqingvika.github.io/img/迷你小技能-XX-Net/171119-2.jpg" alt=""></p><h3 id="部署服务端-gt-填入googleappid，部署"><a href="#部署服务端-gt-填入googleappid，部署" class="headerlink" title="部署服务端-&gt;填入googleappid，部署"></a>部署服务端-&gt;填入googleappid，部署</h3><p><img src="https://wuqingvika.github.io/img/迷你小技能-XX-Net/171119-3.jpg" alt=""></p><h3 id="在部署成功的基础上填入googleappid，保存"><a href="#在部署成功的基础上填入googleappid，保存" class="headerlink" title="在部署成功的基础上填入googleappid，保存"></a>在部署成功的基础上填入googleappid，保存</h3><p><img src="https://wuqingvika.github.io/img/迷你小技能-XX-Net/171119-4.jpg" alt=""></p><h3 id="查看状态，出现如下，恭喜你，可以出去啦"><a href="#查看状态，出现如下，恭喜你，可以出去啦" class="headerlink" title="查看状态，出现如下，恭喜你，可以出去啦"></a>查看状态，出现如下，恭喜你，可以出去啦</h3><p><img src="https://wuqingvika.github.io/img/迷你小技能-XX-Net/171119-5.jpg" alt=""></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="关于ipv6开启如何解决-请升级至最新版本。-详情可见官方教程"><a href="#关于ipv6开启如何解决-请升级至最新版本。-详情可见官方教程" class="headerlink" title="关于ipv6开启如何解决 请升级至最新版本。 详情可见官方教程"></a>关于ipv6开启如何解决 请升级至最新版本。 <a href="https://github.com/XX-net/XX-Net/wiki/IPv6-Win10" target="_blank" rel="noopener">详情可见官方教程</a></h3><h2 id="家庭版-由于我的系统是win10家庭版-其他详情见官方教程"><a href="#家庭版-由于我的系统是win10家庭版-其他详情见官方教程" class="headerlink" title="家庭版(由于我的系统是win10家庭版,其他详情见官方教程)"></a>家庭版(由于我的系统是win10家庭版,其他详情见官方教程)</h2><ol><li>命令行</li></ol><ul><li><p>以管理员权限打开命令提示符（右键单击“开始”图标，然后选择“命令提示符(管理员)”），输入命令</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">// 设置 Teredo 服务器，默认为：win10.ipv6.microsoft.com</span><br><span class="line">netsh interface teredo <span class="built_in">set</span> state enterpriseclient server=default</span><br><span class="line"></span><br><span class="line">// 重置 IPv6 配置</span><br><span class="line">netsh interface ipv6 reset</span><br></pre></td></tr></table></figure></li><li><p>重启系统</p></li><li><p>打开命令提示符，通过 <code>ipconfig /all</code> 命令查看当前网络信息，看到 <code>Teredo Tunneling Pseudo-Interface</code> 有以 2001 开头的地址即可。<br>启动IE浏览器，访问 <a href="http://test-ipv6.com" target="_blank" rel="noopener">http://test-ipv6.com</a>，如果选项卡 “<strong>测试项目</strong>” 下面的 “<strong>不使用域名的 IPv6 测试</strong>” 显示成功，则隧道建立成功。chrome浏览器的测试结果可能和IE不一样，请注意</p></li><li><p>如上面操作后仍无法启用 IPv6，可能是 Teredo 服务器无法正常连接，也可能是 Windows 自身配置问题，可尝试以下两种方法</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">// 第一种：修改 Teredo 服务器为 teredo.remlab.<span class="built_in">net</span></span><br><span class="line">netsh interface teredo <span class="built_in">set</span> state server=teredo.remlab.<span class="built_in">net</span></span><br><span class="line"></span><br><span class="line">// 第二种：先卸载当前 Teredo 适配器再重新启用</span><br><span class="line">netsh interface Teredo <span class="built_in">set</span> state disable</span><br><span class="line">netsh interface Teredo <span class="built_in">set</span> state <span class="built_in">type</span>=default</span><br></pre></td></tr></table></figure><ul><li>其他参考<ul><li><a href="https://support.xbox.com/zh-CN/xbox-on-windows/social/troubleshoot-party-chat" target="_blank" rel="noopener">https://support.xbox.com/zh-CN/xbox-on-windows/social/troubleshoot-party-chat</a></li><li><a href="http://www.windows7en.com/jiaocheng/26518.html" target="_blank" rel="noopener">http://www.windows7en.com/jiaocheng/26518.html</a></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「迷你小技能」第一篇,主要作一些技能知识的扩充，你懂的。&lt;/p&gt;
    
    </summary>
    
      <category term="迷你小技能" scheme="https://wuqingvika.github.io/categories/%E8%BF%B7%E4%BD%A0%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="XX-Net" scheme="https://wuqingvika.github.io/tags/XX-Net/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Linux(一)基础篇之「命令学习」</title>
    <link href="https://wuqingvika.github.io/2017/11/19/%E8%BF%90%E7%BB%B4&amp;%E6%B5%8B%E8%AF%95-linux-1/"/>
    <id>https://wuqingvika.github.io/2017/11/19/运维&amp;测试-linux-1/</id>
    <published>2017-11-19T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.927Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Linux学习笔记」第一篇,主要学习了Linux的一些基本命令。</p><a id="more"></a><h2 id="linux-操作系统-OS"><a href="#linux-操作系统-OS" class="headerlink" title="linux:操作系统 OS"></a>linux:操作系统 OS</h2><h3 id="首先来了解下unix"><a href="#首先来了解下unix" class="headerlink" title="首先来了解下unix:"></a>首先来了解下unix:</h3><pre><code>unix是一个多用户,多任务的操作系统,收费的操作系统.</code></pre><h3 id="linux"><a href="#linux" class="headerlink" title="linux:"></a>linux:</h3><pre><code>版本:    内核版本    发行版本centos:开源的免费的os</code></pre><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><p>虚拟机:就是一台电脑<br>通过虚拟机软件可以在自己的电脑在安装几个电脑<br>常见的虚拟机软件:<br>    VmWare<br>    virtualBox:oracle 免费的</p><h3 id="linux的目录结构"><a href="#linux的目录结构" class="headerlink" title="linux的目录结构"></a>linux的目录结构</h3><pre><code>home:家.用户的家   普通用户的家目录文件在home下 例如:一个用户tom 在home就会存在tom的目录root:超级管理员root的家</code></pre><p>  etc:存放配置文件<br>      usr:存放共享的资源</p><h2 id="linux的命令"><a href="#linux的命令" class="headerlink" title="linux的命令"></a>linux的命令</h2><h3 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h3><pre><code>查看帮助:    man 命令    退出帮助目录:   q切换目录:cd    cd 目录    cd 目录/目录    cd ..  :上一级目录    cd /     :根目录    cd ~    :回家创建目录和删除目录    mkdir 创建        mkdir 目录名        mkdir -p a/b/c    rmdir 删除        rmdir 目录名:只能删除一个空目录展示目录下文件列表(以后使用ll即可)    ls    ls:展示的能看见的文件(和目录)的名称    ls -a:展示所有的文件的名称        文件前面有&quot;.&quot;代表的是隐藏文件    ls -l:显示文件的详细信息        简写的方式: ll(★)    ll -h:友好的显示浏览文件    cat:显示文件的所有内容        cat 文件名    more:分页显示        空格:下一页        回车:下一行    less:分页显示        可以通过PgUp PgDn 翻页查看    tail(★★)        查看一个文件的后面的内容        tail -显示后几行 文件名        tail -f 文件名             动态的查看            例如:                tail -f catalina.xxx.log            通过 ctrl+c 结束滚动查看文件的操作    创建一个文件        touch 文件名        创建一个空白的文件    复制文件        cp 文件 目录/文件名            例如:                cp 1.txt 2.txt                cp 1.txt 1/1.txt    移动文件(重命名)        mv 文件 目录/文件名        mv 文件名 新文件名    删除文件 rm        rm 文件名:带询问删除        rm -f 文件名:不带询问删除        rm -r 目录:带询问的递归删除        rm -rf 目录:不带询问的递归删除(谨慎使用)    tar:打包或解压 一个文件或者目录(★★)        常用的组合            -cvf :打包一个文件或者目录            -zcvf:打包并压缩一个文件或者目录 压缩的格式:gzip            -xvf:解压或者打开一个tar文件        格式:            tar 参数 文件名 要打包|解压的文件目录        例如:            将当前目录下的所有文件打包成test1.tar                tar -cvf test1.tar ./*            将当前目录下的所有文件打包并压缩成test2.tar.gz                tar -zcvf test2.tar.gz ./*            将test1.tar解压到当前目录                tar -xvf test1.tar             将test1.tar解压到b目录                tar -xvf test1.tar -C b</code></pre><h2 id="其他的常用命令"><a href="#其他的常用命令" class="headerlink" title="其他的常用命令"></a>其他的常用命令</h2><pre><code>grep:查找符合条件的字符串(★)    grep 字符串 pwd:显示当前的工作目录wget:下载资料    wget 资源路径</code></pre><h2 id="vi和vim编辑器-理解中了解"><a href="#vi和vim编辑器-理解中了解" class="headerlink" title="vi和vim编辑器(理解中了解)"></a>vi和vim编辑器(理解中了解)</h2><pre><code>编辑普通文件三种模式：命令行、插入、底行模式。切换到命令行模式：按Esc键；切换到插入模式：按 i 、o、a键；    i 在当前位置生前插入    I 在当前行首插入    a 在当前位置后插入    A 在当前行尾插入    o 在当前行之后插入一行    O 在当前行之前插入一行切换到底行模式：按 :（冒号）；</code></pre><h2 id="管道-★"><a href="#管道-★" class="headerlink" title="管道 | ★"></a>管道 | ★</h2><pre><code>重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入例如:    在ifconfig的结果里查找 192.168字符串    ifconfig | grep 192.168以后常用    查找和java相关的进程    ps -ef | grep java    查找和3306相关的信息    ps -ef | grep 3306</code></pre><h2 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h2><pre><code>date 显示或设置系统时间    date  显示当前系统时间    date -s “2014-01-01 10:10:10“  设置系统时间clear 清屏    ctrl+lps 正在运行的某个进程的状态    ps –ef  查看所有进程    ★ps –ef | grep ssh 查找某一进程kill 杀掉某一进程    kill 2868  杀掉2868编号的进程    ★kill -9 2868  强制杀死进程</code></pre><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h3 id="ifconfig-查看所有的网络设置"><a href="#ifconfig-查看所有的网络设置" class="headerlink" title="ifconfig:查看所有的网络设置"></a>ifconfig:查看所有的网络设置</h3><pre><code>ifconfig 网卡名称 down :禁用网卡ifconfig 网卡名称 up :启用网卡</code></pre><h3 id="ping-和window中一样"><a href="#ping-和window中一样" class="headerlink" title="ping:和window中一样"></a>ping:和window中一样</h3><pre><code>通过ctrl+c取消</code></pre><h3 id="netstat-查看网络端口。"><a href="#netstat-查看网络端口。" class="headerlink" title="netstat 查看网络端口。"></a>netstat 查看网络端口。</h3><pre><code>netstat -an | grep 3306 查询3306端口占用情况</code></pre><h2 id="了解用户管理"><a href="#了解用户管理" class="headerlink" title="了解用户管理"></a>了解用户管理</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><pre><code>useradd 用户名:默认会在home目录下给一个用户创建一个目录passwd 用户名: 回车输入密码useradd 用户名 -d /home/目录:创建一个用户然后在指定该用户的家目录</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code>userdel 用户名:只是删除用户 但是不删除家目录userdel -r 用户名:删除用户连带家目录一起删除</code></pre><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户:"></a>切换用户:</h3><pre><code>ssh -l 用户名 -p 22 主机    例如: ssh -l tom -p 22 192.168.17.131su - 用户名</code></pre><h3 id="了解组管理"><a href="#了解组管理" class="headerlink" title="了解组管理"></a>了解组管理</h3><pre><code>添加    groupadd 组名    useradd 用户名 -g 组名删除    groupdel 组名        注意:            若组下有用户,删除不了</code></pre><h2 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限:"></a>文件的权限:</h2><ul><li>普通文件： 包括文本文件、数据文件、可执行的二进制程序文件等。 </li><li>目录文件： Linux系统把目录看成是一种特殊的文件，利用它构成文件系统的树型结构。  </li><li><p>设备文件： Linux系统把每一个设备都看成是一个文件</p></li><li><p>通过ll展示的列表<br> 以 d 开始的是目录文件<br> 以 - 开始的是普通文件</p></li><li><p>文件的权限9个字母 三个三个一组<br>  第一组代表的是当前用户的权限<br>  第二组代表的是组的权限<br>  第三组代表的是其他用户的权限</p><p>  r:读      4<br>  w:写    2<br>  x:执行    1</p></li><li><p>chmod 变更文件或目录的权限。<br>  chmod 755 a.txt<br>  chmod u=rwx,g=rx,o=rx a.txt<br>  chmod 000 a.txt  /<br>  ★chmod 777 a.txt</p></li><li><p>了解:chown 变更文件或目录改文件所属用户和组<br> chown u1:public a.txt    ：变更当前的目录或文件的所属用户和组<br> chown -R u1:public dir    ：变更目录中的所有的子目录及文件的所属用户和组<br> 格式:</p><pre><code>chown 用户:组 文件</code></pre></li><li><p>linux :多用户 多任务的操作系统<br>常用命令:<br> cd 切换目录</p><pre><code>cd /cd ~cd ..</code></pre><p> ll 展示列表<br> mkdir [-p] 目录<br> rmdir 目录:删除空目录</p><p> touch 文件名:创建空白文件<br> cp 文件 目录/文件:复制文件<br> mv 文件 目录:移动文件<br> mv 文件 新文件:文件重命名<br> rm -rf 文件|目录:不询问递归删除</p><p> tar 打包或者解压</p><pre><code>tar -cvf 文件名称 目录|文件  打包tar -zcvf 文件名称 目录|文件  打包并压缩tar -xvf 文件名称 解压至当前目录tar -xvf 文件名称 -C 目录: 解压至指定目录</code></pre><p> grep 查找<br> | 管道</p><p> 设置时间</p><pre><code>date -s &quot;时间&quot;:设置时间ps -ef :查看所有进程</code></pre><p> ifconfig:查看ip地址</p></li></ul><h2 id="回顾总结"><a href="#回顾总结" class="headerlink" title="回顾总结"></a>回顾总结</h2><h3 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux:常用命令:"></a>linux:常用命令:</h3><pre><code>cd  切换命令    cd /    cd ~    cd ../../    cd xxll 展示所有的文件    ll -h 友好的展示mkdir 创建目录    mkdir 目录名    mkdir -p a/b/b/brmdir 移除目录    rmdir 目录名 :移除空目录touch 文件名:创建一个空文件cp 文件名 目录/文件名:复制mv 文件名 目录/文件名:移动mv 文件名 新文件名:重命名rm 文件名:带询问的删除文件rm -f 文件名:不带询问的删除文件rm -rf 目录|文件:不带询问的递归文件tar: 打包|解压一个目录或者文件    tar -cvf 文件名 目录:将指定的目录打包成一个指定的文件    tar -zcvf 文件名 目录:将指定的目录打包并且压缩成一个指定的文件    tar -xvf 文件名 :将指定的文件解压到当前目录    tar -xvf 文件名 -C 目录:将指定的文件解压到指定的目录grep 查找|     管道ps -ef | grep javanetstate -an | grep 3306kill -9 pid :强制结束一个进程ifconfig:查看当前网卡信息ping:查看网络是否通畅chmod 777 文件名chown 更改文件的归属者</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Linux学习笔记」第一篇,主要学习了Linux的一些基本命令。&lt;/p&gt;
    
    </summary>
    
      <category term="运维&amp;测试" scheme="https://wuqingvika.github.io/categories/%E8%BF%90%E7%BB%B4-%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Linux" scheme="https://wuqingvika.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【索引】前端开发从基础到进阶</title>
    <link href="https://wuqingvika.github.io/2017/11/19/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://wuqingvika.github.io/2017/11/19/前端开发/</id>
    <published>2017-11-18T16:00:00.000Z</published>
    <updated>2017-11-28T14:30:02.180Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这篇文章汇总了本站中所有与「Bootstrap」有关的博文。<strong>按照学习路线由浅入深排序</strong>，大家可以根据需求点击阅读。<font color="red">【本文长期更新】</font></p><a id="more"></a><h2 id="核心知识"><a href="#核心知识" class="headerlink" title="核心知识"></a>核心知识</h2><h3 id="一、BootStrap篇"><a href="#一、BootStrap篇" class="headerlink" title="一、BootStrap篇"></a>一、BootStrap篇</h3><ul><li><a href="https://wuqingvika.github.io/2017/11/19/前端开发-bootstrap-1/">【笔记】Bootstrap基础篇（一）test1</a></li><li><a href="https://wuqingvika.github.io/2017/11/19/前端开发-bootstrap-2/">【笔记】Bootstrap基础篇（二）test2</a></li></ul><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章汇总了本站中所有与「Bootstrap」有关的博文。&lt;strong&gt;按照学习路线由浅入深排序&lt;/strong&gt;，大家可以根据需求点击阅读。&lt;font color=&quot;red&quot;&gt;【本文长期更新】&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/categories/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
    
      <category term="博文索引" scheme="https://wuqingvika.github.io/tags/%E5%8D%9A%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Java基础知识(一)「文件基本操作」</title>
    <link href="https://wuqingvika.github.io/2016/06/23/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91-java-1/"/>
    <id>https://wuqingvika.github.io/2016/06/23/后端开发-java-1/</id>
    <published>2016-06-23T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.706Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Java学习笔记」第一篇之基础知识,具体内容主要包括文件的基本操作，详情可见右侧内容概要，<font color="red">【本文长期更新】</font>。</p><a id="more"></a><h1 id="1、关于文件的基础知识"><a href="#1、关于文件的基础知识" class="headerlink" title="1、关于文件的基础知识"></a>1、关于文件的基础知识</h1><h2 id="1-1创建文件"><a href="#1-1创建文件" class="headerlink" title="1.1创建文件"></a>1.1创建文件</h2><pre><code>File file=new File(FileUtil.FileName);if(!file.exists()){file.createNewFile();}//创建文件获取文件名file.getName();文件路径：file.getPath();//相对路径        file.getAbsolutePath();//绝对路径</code></pre><h2 id="1-2删除文件"><a href="#1-2删除文件" class="headerlink" title="1.2删除文件"></a>1.2删除文件</h2><pre><code>File file=new File(FileUtil.fileName);if(file.exists()){file.delete();}</code></pre><h2 id="1-3重命名文件"><a href="#1-3重命名文件" class="headerlink" title="1.3重命名文件"></a>1.3重命名文件</h2><blockquote><p>重命名文件</p></blockquote><pre><code>File file=new File(FileUtil.fileName);File newfile=new File(&quot;anotherFile.txt&quot;);file.renameTo(newfile);</code></pre><h2 id="1-4创建文件夹"><a href="#1-4创建文件夹" class="headerlink" title="1.4创建文件夹"></a>1.4创建文件夹</h2><pre><code>  File folder=new File(FileUtil.folderName);    if(folder.exists()!=false){//不存在     folder.mkdirs();     //folder.mkdirs()用这个比mkdir()     //以后只要创建文件夹，都用Mkdirs()更确保程序的稳定性。}//加上分隔符folderName=&quot;newFolder&quot;+File.separator+&quot;SubFolder&quot;;</code></pre><h2 id="1-5删除文件夹"><a href="#1-5删除文件夹" class="headerlink" title="1.5删除文件夹"></a>1.5删除文件夹</h2><pre><code>//RemoveFolder   File folder=new File(FileUtil.folderName);   if(folder.exists()){   folder.delete();}//只能删除子目录。不能删除非空文件夹</code></pre><h2 id="1-6获得文件大小"><a href="#1-6获得文件大小" class="headerlink" title="1.6获得文件大小"></a>1.6获得文件大小</h2><pre><code>file.length();//文件是否可读file.canRead();//文件是否可写；file.canWrite();//文件是否隐藏file.isHidden();</code></pre><h1 id="2、字节流"><a href="#2、字节流" class="headerlink" title="2、字节流"></a>2、字节流</h1><h2 id="2-1文件输入流"><a href="#2-1文件输入流" class="headerlink" title="2.1文件输入流"></a>2.1文件输入流</h2><pre><code> InputStream is=null; is=new FileInputStream(&quot;D:/hello.txt&quot;);    byte[] b=new byte[1024];    int len=-1;    while((len=is.read(b))!=-1){    sysout(new String(b,0,len))    }is.close();!!!!!!</code></pre><h2 id="2-2文件输出流"><a href="#2-2文件输出流" class="headerlink" title="2.2文件输出流"></a>2.2文件输出流</h2><pre><code>OutputStream os=new FileOutputStream(&quot;D:/hell2.txt&quot;,true);//true代表不覆盖原来的，继续appendString str=&quot;hello wuqingvika!&quot;;os.write(str.getBytes());os.close();}</code></pre><h1 id="3、字符流"><a href="#3、字符流" class="headerlink" title="3、字符流"></a>3、字符流</h1><h2 id="3-1读"><a href="#3-1读" class="headerlink" title="3.1读"></a>3.1读</h2><pre><code>Reader reader=new FileReader(&quot;D:/a.txt&quot;);char[] chars=new char[1024];int len=-1;while((len=reader.read(chars)!=-1){sysout(new String(chars,0,len));}</code></pre><h2 id="3-2写"><a href="#3-2写" class="headerlink" title="3.2写"></a>3.2写</h2><p>Writer writer=new FileWriter(“D:/hi.txt”);<br>writer.write(“吴庆加油啦。！！haha”);<br>writer.close();</p><h1 id="4、转换流"><a href="#4、转换流" class="headerlink" title="4、转换流"></a>4、转换流</h1><pre><code>InputStream is=new FileInputStream(&quot;D:/hi.txt&quot;);    InputStreamReader reader=new InputStreamReader(is);    int len=-1;    char[] chars=new char[1024];    while((len=reader.read(chars))!=-1){        System.out.println(new String(chars,0,len));    }    reader.close();</code></pre><h1 id="5、缓冲流"><a href="#5、缓冲流" class="headerlink" title="5、缓冲流"></a>5、缓冲流</h1><pre><code>Reader reader=new FileReader(&quot;D:/hi.txt&quot;);     BufferedReader br=new BufferedReader(reader);     String str=null;     while((str=br.readLine())!=null){        System.out.println(str);     }   br.close();</code></pre><blockquote><p>//第二种写法</p></blockquote><pre><code>BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(&quot;D:/hi.txt&quot;)));    String str=null;    while((str=br.readLine())!=null){       System.out.println(str);    }  br.close();</code></pre><h1 id="6、打印流"><a href="#6、打印流" class="headerlink" title="6、打印流"></a>6、打印流</h1><pre><code>PrintStream ps=null;ps=new PrintStream(&quot;D:/ps.txt&quot;);ps.print(&quot;helelll&quot;);ps.println(&quot;dkdk&quot;);ps.print(&quot;dks&quot;);            </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Java学习笔记」第一篇之基础知识,具体内容主要包括文件的基本操作，详情可见右侧内容概要，&lt;font color=&quot;red&quot;&gt;【本文长期更新】&lt;/font&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="后端开发" scheme="https://wuqingvika.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://wuqingvika.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Spring入门篇（一）了解spring</title>
    <link href="https://wuqingvika.github.io/2016/06/20/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91-spring-1/"/>
    <id>https://wuqingvika.github.io/2016/06/20/后端开发-spring-1/</id>
    <published>2016-06-20T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.897Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Spring学习笔记」第一篇,具体内容可见右侧内容概要，<font color="red">【本文长期更新】</font>。</p><a id="more"></a><h1 id="1、HelloWorld程序"><a href="#1、HelloWorld程序" class="headerlink" title="1、HelloWorld程序"></a>1、HelloWorld程序</h1><blockquote><p>注：导入Jar包（commons-logging.jar 和spring.jar）</p></blockquote><h2 id="1-1HelloWorld-java"><a href="#1-1HelloWorld-java" class="headerlink" title="1.1HelloWorld.java"></a>1.1HelloWorld.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.createobject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello wuqingvika"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2applicationContext-xml"><a href="#1-2applicationContext-xml" class="headerlink" title="1.2applicationContext.xml"></a>1.2applicationContext.xml</h2><ul><li>放在src目录下。</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span><br><span class="line">&lt;bean id="HelloWorld" class="com.wq.createobject.HelloWorld"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="1-3HelloWorldTest-java"><a href="#1-3HelloWorldTest-java" class="headerlink" title="1.3HelloWorldTest.java"></a>1.3HelloWorldTest.java</h2><ul><li>一个测试类。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzit.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.wq.createobject.HelloWorld;</span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">HelloWorld wq=(HelloWorld)context.getBean(<span class="string">"HelloWorld"</span>);</span><br><span class="line">wq.sayHello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、Spring创建对象的方式"><a href="#2、Spring创建对象的方式" class="headerlink" title="2、Spring创建对象的方式"></a>2、Spring创建对象的方式</h1><h2 id="2-1默认的构造函数创建对象"><a href="#2-1默认的构造函数创建对象" class="headerlink" title="2.1默认的构造函数创建对象"></a>2.1默认的构造函数创建对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在spring容器中，默认情况下调用了一个类的默认的构造函数创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello wucan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello wuqingvika"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第<span class="number">1</span>种方式 --&gt;</span><br><span class="line"> &lt;bean id="HelloWorld" class="com.wq.createobject.method.HelloWorld"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>测试方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_Default</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//根据id把spring容器中的bean提取出来了</span></span><br><span class="line">HelloWorld wq=(HelloWorld)context.getBean(<span class="string">"HelloWorld"</span>);</span><br><span class="line">wq.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2利用静态工厂模式创建对象"><a href="#2-2利用静态工厂模式创建对象" class="headerlink" title="2.2利用静态工厂模式创建对象"></a>2.2利用静态工厂模式创建对象</h2><ul><li>静态工厂类：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.createobject.method.factory;</span><br><span class="line"><span class="keyword">import</span> com.wq.createobject.method.HelloWorld;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HelloWorld <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HelloWorld();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件：</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第<span class="number">2</span>种方式 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"helloWorld2"</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.createobject.method.factory.HelloWorldFactory"</span> </span><br><span class="line">factory-method="getInstance"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>测试方法：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用静态工厂模式创建对象</span></span><br><span class="line"><span class="comment"> * &lt;bean id="helloWorld2" </span></span><br><span class="line"><span class="comment">class="com.itheima12.spring.createobject.method.factory.HelloWorldFactory"</span></span><br><span class="line"><span class="comment">factory-method="getInstance"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">  spring容器内部调用了HelloWorldFactory中的getInstance方法创建对象</span></span><br><span class="line"><span class="comment">      而具体的new对象的过程是由程序员来完成的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorldFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">HelloWorld wq=(HelloWorld)context.getBean(<span class="string">"helloWorld2"</span>);</span><br><span class="line">wq.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3实例工厂方法"><a href="#2-3实例工厂方法" class="headerlink" title="2.3实例工厂方法"></a>2.3实例工厂方法</h2><ul><li>工厂类：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.createobject.method.factory;</span><br><span class="line"><span class="keyword">import</span> com.wq.createobject.method.HelloWorld;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldFactory2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  HelloWorld <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HelloWorld();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第<span class="number">3</span>种方式 wqwqwq--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"helloWorldFactory"</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.createobject.method.factory.HelloWorldFactory2"</span> </span><br><span class="line">&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">    factory-bean是一个工厂bean</span><br><span class="line">    factory-method是一个工厂方法</span><br><span class="line">     --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"helloWorld3"</span> </span><br><span class="line">factory-bean=<span class="string">"helloWorldFactory"</span></span><br><span class="line">factory-method="getInstance"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>测试方法：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例工厂方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateObject_InstaceFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启动spring容器</span></span><br><span class="line">ApplicationContext context = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">HelloWorld helloWorld = (HelloWorld)context.getBean(<span class="string">"helloWorld3"</span>);</span><br><span class="line">helloWorld.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、Spring别名"><a href="#3、Spring别名" class="headerlink" title="3、Spring别名"></a>3、Spring别名</h1><h2 id="3-1HelloWorld-java"><a href="#3-1HelloWorld-java" class="headerlink" title="3.1HelloWorld.java"></a>3.1HelloWorld.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.alias;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello wuqingvika"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2配置文件"><a href="#3-2配置文件" class="headerlink" title="3.2配置文件"></a>3.2配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>&gt;</span><br><span class="line">&lt;bean id="HelloWorld" class="com.wq.alias.HelloWorld"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!--name要与id对应哦--&gt;</span><br><span class="line">&lt;alias name=<span class="string">"HelloWorld"</span> alias=<span class="string">"吴大大"</span>/&gt;</span><br><span class="line">&lt;alias name=<span class="string">"HelloWorld"</span> alias=<span class="string">"吴小小"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3测试方法"><a href="#3-3测试方法" class="headerlink" title="3.3测试方法"></a>3.3测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启动spring容器</span></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">HelloWorld wq=(HelloWorld)context.getBean(<span class="string">"HelloWorld"</span>);</span><br><span class="line">wq.sayHello();</span><br><span class="line">HelloWorld wq1=(HelloWorld)context.getBean(<span class="string">"吴大大"</span>);</span><br><span class="line">wq1.sayHello();</span><br><span class="line">HelloWorld wq2=(HelloWorld)context.getBean(<span class="string">"吴小小"</span>);</span><br><span class="line">wq2.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、Spring创建对象的时间"><a href="#4、Spring创建对象的时间" class="headerlink" title="4、Spring创建对象的时间"></a>4、Spring创建对象的时间</h1><blockquote><p>知识点：</p><blockquote><p>在默认情况下启动Spring容器的时候创建对象。</p></blockquote></blockquote><p>配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"helloWorld"</span> </span><br><span class="line">    class="com.itheima12.spring.createobject.when.HelloWorld"&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"helloWorld2"</span> </span><br><span class="line">    class="com.itheima12.spring.createobject.when.HelloWorld" lazy-init="true"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在默认的情况下，启动spring容器的时候创建对象</span></span><br><span class="line"><span class="comment">     *    因为是在spring容器启动的时候就创建对象，所以只要配置文件书写错误，在一开始的时候(web容器启动)就能发现错误了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_Default</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = </span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    HelloWorld helloWorld = (HelloWorld)context.getBean(<span class="string">"helloWorld"</span>);</span><br><span class="line">    helloWorld.hello();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * &lt;bean id="helloWorld2" </span></span><br><span class="line"><span class="comment">    class="com.itheima12.spring.createobject.when.HelloWorld" </span></span><br><span class="line"><span class="comment">    lazy-init="true"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    在context.getBean时才要创建该对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_Lazy_init_TRUE</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = </span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    HelloWorld helloWorld = (HelloWorld)context.getBean(<span class="string">"helloWorld"</span>);</span><br><span class="line">    HelloWorld helloWorld2 = (HelloWorld)context.getBean(<span class="string">"helloWorld2"</span>);</span><br><span class="line">    helloWorld.hello();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="5、单例与多例"><a href="#5、单例与多例" class="headerlink" title="5、单例与多例"></a>5、单例与多例</h1><h2 id="5-1单例"><a href="#5-1单例" class="headerlink" title="5.1单例"></a>5.1单例</h2><blockquote><p>配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id="HelloWorld" class="com.wq.scope.HelloWorld"&gt;&lt;/bean&gt;`</span><br><span class="line"></span><br><span class="line">     * 在spring容器中的对象，默认情况下是单例的</span><br><span class="line">     *    因为对象是单例的，所以只要在类上声明一个属性，该属性中含有数据，</span><br><span class="line">     *    那么该属性是全局的（很危险）</span><br><span class="line">     *============(输出结果）=============</span><br><span class="line">     * 这是无参构造方法哟</span><br><span class="line">     *com.wq.scope.HelloWorld@<span class="number">7</span>cdbc5d3</span><br><span class="line">     *com.wq.scope.HelloWorld@<span class="number">7</span>cdbc5d3</span><br><span class="line">     *====================================</span><br><span class="line">     */</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_default</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//启动spring容器</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">    ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    HelloWorld wq=(HelloWorld)context.getBean(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    HelloWorld wq1=(HelloWorld)context.getBean(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(wq);</span><br><span class="line">    System.out.println(wq1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-2多例"><a href="#5-2多例" class="headerlink" title="5.2多例"></a>5.2多例</h2><blockquote><p>配置文件</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"HelloWorld2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.scope.HelloWorld"</span></span><br><span class="line">        scope="prototype"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><blockquote><p>测试方法    </p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果说scope为"prototype"的时候，spring容器产生的对象就是多实例</span></span><br><span class="line"><span class="comment"> *    无论lazy-init为什么值，都是在context.getBean时才要创建对象</span></span><br><span class="line"><span class="comment"> *============(输出结果）=============</span></span><br><span class="line"><span class="comment"> * 这是无参构造方法哟</span></span><br><span class="line"><span class="comment">     * 这是无参构造方法哟</span></span><br><span class="line"><span class="comment">     * com.wq.scope.HelloWorld@2b80d80f</span></span><br><span class="line"><span class="comment">     * com.wq.scope.HelloWorld@3ab39c39</span></span><br><span class="line"><span class="comment"> *====================================</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_scope_prototype</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启动spring容器</span></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">HelloWorld wq=(HelloWorld)context.getBean(<span class="string">"HelloWorld2"</span>);</span><br><span class="line">HelloWorld wq1=(HelloWorld)context.getBean(<span class="string">"HelloWorld2"</span>);</span><br><span class="line">System.out.println(wq);</span><br><span class="line">System.out.println(wq1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6、Springday的init和destroy和执行流程"><a href="#6、Springday的init和destroy和执行流程" class="headerlink" title="6、Springday的init和destroy和执行流程"></a>6、Springday的init和destroy和执行流程</h1><blockquote><p>测试方法</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在构造函数之后，立刻执行init方法</span></span><br><span class="line"><span class="comment"> * 如果spring容器没有执行close方法，则不执行销毁方法</span></span><br><span class="line"><span class="comment"> * 如果spring容器执行了close方法，在执行该方法之前要执行销毁方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_default</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启动spring容器</span></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">HelloWorld wq=(HelloWorld)context.getBean(<span class="string">"HelloWorld"</span>);</span><br><span class="line">wq.sayHello();</span><br><span class="line">ClassPathXmlApplicationContext contextwq=(ClassPathXmlApplicationContext)context;</span><br><span class="line">contextwq.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"HelloWorld"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.scope.HelloWorld"</span></span><br><span class="line">init-method="init" destroy-method="destory"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>执行流程</p><blockquote><p>1、创建一个spring容器的对象<br>2、调用构造函数创建在spring容器中的对象（不能是多实例的，lazy-init不能为true)<br>3、执行一个对象的init方法<br>4、利用context.getBean得到一个对象，但是这个时候如果一个bean的scope为prototype或者lazy-init为true，则创建对象<br>5、对象调用业务逻辑方法<br>6、当Spring容器关闭的时候执行destory方法</p></blockquote></blockquote><h1 id="7、spring容器的DI-xml-setter方法"><a href="#7、spring容器的DI-xml-setter方法" class="headerlink" title="7、spring容器的DI-xml-setter方法"></a>7、spring容器的DI-xml-setter方法</h1><h2 id="7-1Student-java"><a href="#7-1Student-java" class="headerlink" title="7.1Student.java"></a>7.1Student.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.di.xml.setter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Student..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2Person-java"><a href="#7-2Person-java" class="headerlink" title="7.2Person.java"></a>7.2Person.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.di.xml.setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long pid;</span><br><span class="line"><span class="keyword">private</span> String pname;</span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"><span class="keyword">private</span> List lists;</span><br><span class="line"><span class="keyword">private</span> Set sets;</span><br><span class="line"><span class="keyword">private</span> Map maps;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> properties;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Object[] objects;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(Long pid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pid = pid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPname</span><span class="params">(String pname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pname = pname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getLists</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lists;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLists</span><span class="params">(List lists)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lists = lists;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set <span class="title">getSets</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set sets)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sets = sets;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map maps)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maps = maps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object[] getObjects() &#123;</span><br><span class="line"><span class="keyword">return</span> objects;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjects</span><span class="params">(Object[] objects)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.objects = objects;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3配置文件"><a href="#7-3配置文件" class="headerlink" title="7.3配置文件"></a>7.3配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.di.xml.setter.Person"</span>&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   property就是一个bean的属性</span><br><span class="line">     name就是用来描述属性的名称</span><br><span class="line">     value就是值，如果是一般类型(基本类型和String)</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;property name="pid" value="20130501403"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="pname" value="wuqingvika"&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   spring容器内部创建的student对象给Person的student对象赋值了</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;property name=<span class="string">"student"</span> &gt;</span><br><span class="line">&lt;ref bean=<span class="string">"student"</span>/&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"lists"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;list1&lt;/value&gt;</span><br><span class="line">&lt;value&gt;list2&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"sets"</span>&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;value&gt;set1&lt;/value&gt;</span><br><span class="line">&lt;value&gt;set2&lt;/value&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"maps"</span>&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">&lt;entry key=<span class="string">"m1"</span>&gt;</span><br><span class="line">   &lt;value&gt;map1&lt;/value&gt;</span><br><span class="line">&lt;/entry&gt;</span><br><span class="line">&lt;entry key=<span class="string">"m2"</span>&gt;</span><br><span class="line">   &lt;value&gt;map2&lt;/value&gt;</span><br><span class="line">&lt;/entry&gt;</span><br><span class="line">&lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"properties"</span>&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;prop key="p1"&gt;prop1&lt;/prop&gt;</span><br><span class="line">&lt;prop key="p2"&gt;prop2&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"objects"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;obj1&lt;/value&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"student"</span>/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id="student" class="com.wq.di.xml.setter.Student"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="7-4测试方法"><a href="#7-4测试方法" class="headerlink" title="7.4测试方法"></a>7.4测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_di_xml_setter</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启动spring容器</span></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Person p=(Person)context.getBean(<span class="string">"person"</span>);</span><br><span class="line">System.out.println(p.getPname()+<span class="string">"  "</span>+p.getLists().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8、spring容器的IOC和DI的意义"><a href="#8、spring容器的IOC和DI的意义" class="headerlink" title="8、spring容器的IOC和DI的意义"></a>8、spring容器的IOC和DI的意义</h1><blockquote><p>最原始的用法</p></blockquote><h2 id="8-1Document-java-接口"><a href="#8-1Document-java-接口" class="headerlink" title="8.1Document.java(接口)"></a>8.1Document.java(接口)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Document</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDocument</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDocument</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2ExcelDocument-java-实现类"><a href="#8-2ExcelDocument-java-实现类" class="headerlink" title="8.2ExcelDocument.java(实现类)"></a>8.2ExcelDocument.java(实现类)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelDocument</span> <span class="keyword">implements</span> <span class="title">Document</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Excel Write"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Excel read"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PdfDocument.java同上<br>WordDocument.java同上</p></blockquote><h2 id="8-3DocumentManager-java"><a href="#8-3DocumentManager-java" class="headerlink" title="8.3DocumentManager.java"></a>8.3DocumentManager.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Document document;<span class="comment">//定义一个接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DocumentManager</span><span class="params">(Document document)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document=document;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document.readDocument();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document.writeDocument();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4测试方法"><a href="#8-4测试方法" class="headerlink" title="8.4测试方法"></a>8.4测试方法</h2><p>//为不完全的面向接口编程<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentTest</span></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDocument_NoSpring</span><span class="params">()</span></span>&#123;</span><br><span class="line">Document document=<span class="keyword">new</span> WordDocument();</span><br><span class="line">DocumentManager dm=<span class="keyword">new</span> DocumentManager(document);</span><br><span class="line">dm.readDocument();</span><br><span class="line">dm.writeDocument();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>输出结果</p><blockquote><p>Word read <br><br>Word Write</p></blockquote></blockquote><h2 id="8-5利用spring（DocumentManager-java"><a href="#8-5利用spring（DocumentManager-java" class="headerlink" title="8.5利用spring（DocumentManager.java)"></a>8.5利用spring（DocumentManager.java)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentManager</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Document document;</span><br><span class="line"><span class="comment">//public DocumentManager(Document document)&#123;</span></span><br><span class="line"><span class="comment">//this.document=document;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document.readDocument();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Document <span class="title">getDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> document;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDocument</span><span class="params">(Document document)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document = document;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document.writeDocument();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6applicationContext-xml"><a href="#8-6applicationContext-xml" class="headerlink" title="8.6applicationContext.xml"></a>8.6applicationContext.xml</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"documentManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.spring.iocdi.DocumentManager"</span>&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   该属性是一个接口</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"document"</span>&gt;</span><br><span class="line">     &lt;ref bean=<span class="string">"excelDocument"</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id="wordDocument" class="com.wq.spring.iocdi.WordDocument"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="pdfDocument" class="com.wq.spring.iocdi.PdfDocument"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="excelDocument" class="com.wq.spring.iocdi.ExcelDocument"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="8-7测试方法"><a href="#8-7测试方法" class="headerlink" title="8.7测试方法"></a>8.7测试方法</h2><blockquote><p>IOC和DI结合的真正的意义：java代码端完全的面向接口编程<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDocument_Spring</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">DocumentManager dm=(DocumentManager) context.getBean(<span class="string">"documentManager"</span>);</span><br><span class="line">dm.writeDocument();</span><br><span class="line">dm.readDocument();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="9、spring容器的IOC和DI的意义-mvc"><a href="#9、spring容器的IOC和DI的意义-mvc" class="headerlink" title="9、spring容器的IOC和DI的意义-mvc"></a>9、spring容器的IOC和DI的意义-mvc</h1><h2 id="9-1PersonDao-java-接口"><a href="#9-1PersonDao-java-接口" class="headerlink" title="9.1PersonDao.java(接口)"></a>9.1PersonDao.java(接口)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-2PersonDaoImpl-实现类"><a href="#9-2PersonDaoImpl-实现类" class="headerlink" title="9.2PersonDaoImpl(实现类)"></a>9.2PersonDaoImpl(实现类)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"save person hahahaha..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3PersonService"><a href="#9-3PersonService" class="headerlink" title="9.3PersonService"></a>9.3PersonService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4PersonServiceImpl"><a href="#9-4PersonServiceImpl" class="headerlink" title="9.4PersonServiceImpl"></a>9.4PersonServiceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceImpl</span> <span class="keyword">implements</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersonDao <span class="title">getPersonDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> personDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonDao</span><span class="params">(PersonDao personDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personDao = personDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.personDao.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-5PersonAction-java"><a href="#9-5PersonAction-java" class="headerlink" title="9.5PersonAction.java"></a>9.5PersonAction.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAciton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> PersonService personService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersonService <span class="title">getPersonService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> personService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonService</span><span class="params">(PersonService personService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personService = personService;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personService.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-6application-xml"><a href="#9-6application-xml" class="headerlink" title="9.6application.xml"></a>9.6application.xml</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id="personDao" class="com.wq.spring.dao.impl.PersonDaoImpl"&gt;&lt;/bean&gt;   </span><br><span class="line">    &lt;bean id=<span class="string">"personService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.spring.service.impl.PersonServiceImpl"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"personDao"</span>&gt;</span><br><span class="line">    &lt;ref bean=<span class="string">"personDao"</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">    &lt;bean id=<span class="string">"personAction"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.spring.action.PersonAciton"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"personService"</span>&gt;</span><br><span class="line">    &lt;ref bean=<span class="string">"personService"</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="9-7测试类"><a href="#9-7测试类" class="headerlink" title="9.7测试类"></a>9.7测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMvc</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PersonAciton personAction=(PersonAciton)context.getBean(<span class="string">"personAction"</span>);</span><br><span class="line">personAction.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10、spring容器的DI-构造器注入"><a href="#10、spring容器的DI-构造器注入" class="headerlink" title="10、spring容器的DI-构造器注入"></a>10、spring容器的DI-构造器注入</h1><h2 id="10-1Person-java"><a href="#10-1Person-java" class="headerlink" title="10.1Person.java"></a>10.1Person.java</h2><ul><li>也可同时给出所有属性的set方法。（可以同时使用）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long pid;</span><br><span class="line"><span class="keyword">private</span> String pname;</span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"><span class="keyword">private</span> List lists;</span><br><span class="line"><span class="keyword">private</span> Set sets;</span><br><span class="line"><span class="keyword">private</span> Map maps;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String pname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.pname = pname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String pname, Student student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.pname = pname;</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getLists</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lists;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set <span class="title">getSets</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-2Student-java"><a href="#10-2Student-java" class="headerlink" title="10.2Student.java"></a>10.2Student.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Student..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3applicationContext-xml"><a href="#10-3applicationContext-xml" class="headerlink" title="10.3applicationContext.xml"></a>10.3applicationContext.xml</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.di.xml.constructor.Person"</span>&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   constructor-arg指的是构造器中的参数</span><br><span class="line">    index 角标  从<span class="number">0</span>开始</span><br><span class="line">    value 如果一般类型,用value赋值</span><br><span class="line">    ref   引用类型赋值</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;constructor-arg index="0" value="wuqingvika"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;constructor-arg index="1" ref="student"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id="student" class="com.wq.di.xml.constructor.Student"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="10-4测试方法"><a href="#10-4测试方法" class="headerlink" title="10.4测试方法"></a>10.4测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_di_xml_constructor</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启动spring容器</span></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Person p=(Person)context.getBean(<span class="string">"person"</span>);</span><br><span class="line">System.out.println(p.getPname());</span><br><span class="line">p.getStudent().say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11、spring容器的继承"><a href="#11、spring容器的继承" class="headerlink" title="11、spring容器的继承"></a>11、spring容器的继承</h1><h2 id="11-1Person-java-父类"><a href="#11-1Person-java-父类" class="headerlink" title="11.1Person.java(父类)"></a>11.1Person.java(父类)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-2Student-java-子类"><a href="#11-2Student-java-子类" class="headerlink" title="11.2Student.java(子类)"></a>11.2Student.java(子类)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-3applicationContext-xml"><a href="#11-3applicationContext-xml" class="headerlink" title="11.3applicationContext.xml"></a>11.3applicationContext.xml</h2><blockquote><p>第一种方式<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--在父类中进行赋值,子类通过parent属性继承父类的内容--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.spring.extend.Person"</span>&gt;</span><br><span class="line">&lt;property name="name" value="wuqing"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> &lt;!--parent 实现了spring容器内部的继承关系--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.spring.extend.Student"</span> </span><br><span class="line">parent="person"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>第二种方式<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 因为java的继承机制，子类继承了父类的setXxx方法，所以子类可以利用setXxx方法注入值 --&gt;</span><br><span class="line">&lt;bean id="person2" class="com.wq.spring.extend.Person"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"student2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.spring.extend.Student"</span>&gt;</span><br><span class="line">&lt;property name="name" value="wuqing2"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="11-4测试方法"><a href="#11-4测试方法" class="headerlink" title="11.4测试方法"></a>11.4测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExtends</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//Student st=(Student) context.getBean("student");</span></span><br><span class="line">Student st=(Student) context.getBean(<span class="string">"student2"</span>);</span><br><span class="line">System.out.println(st.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12、spring容器的注解"><a href="#12、spring容器的注解" class="headerlink" title="12、spring容器的注解"></a>12、spring容器的注解</h1><h2 id="12-1ClassInfo-java"><a href="#12-1ClassInfo-java" class="headerlink" title="12.1ClassInfo.java"></a>12.1ClassInfo.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wuqingvika</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ClassInfo &#123;</span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-2MethodInfo-java"><a href="#12-2MethodInfo-java" class="headerlink" title="12.2MethodInfo.java"></a>12.2MethodInfo.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MethodInfo &#123;</span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3Wuqingvika07Wu-java"><a href="#12-3Wuqingvika07Wu-java" class="headerlink" title="12.3Wuqingvika07Wu.java"></a>12.3Wuqingvika07Wu.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ClassInfo</span>(name=<span class="string">"这就是传说中的07Wu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wuqingvika07Wu</span> </span>&#123;</span><br><span class="line"><span class="meta">@MethodInfo</span>(name=<span class="string">"传说中的Java学科"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Java</span><span class="params">()</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-4AnnotationParse-java"><a href="#12-4AnnotationParse-java" class="headerlink" title="12.4AnnotationParse.java"></a>12.4AnnotationParse.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationParse</span> </span>&#123;</span><br><span class="line"><span class="comment">//注解解析</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Class class1=Wuqingvika07Wu.class;</span><br><span class="line">  <span class="comment">//该类上面是否存在ClassInfo的注解</span></span><br><span class="line">  <span class="keyword">if</span>(class1.isAnnotationPresent(ClassInfo.class))&#123;</span><br><span class="line">  <span class="comment">//获取类上面的classInfo注解</span></span><br><span class="line">  ClassInfo classInfo=(ClassInfo) </span><br><span class="line">  class1.getAnnotation(ClassInfo.class);</span><br><span class="line">  System.out.println(classInfo.name());</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  Method[] methods=  class1.getMethods();</span><br><span class="line">  <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line"><span class="comment">//判断该方法上面是否存在MethodInfo的注解</span></span><br><span class="line"><span class="keyword">if</span>(method.isAnnotationPresent(MethodInfo.class))&#123;</span><br><span class="line"><span class="comment">//获取到方法上面的注解</span></span><br><span class="line">MethodInfo methodInfo=method.getAnnotation(MethodInfo.class);</span><br><span class="line">System.out.println(methodInfo.name());</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnotation</span><span class="params">()</span></span>&#123;</span><br><span class="line">AnnotationParse.parse();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p><blockquote><p>这就是传说中的07Wu<br>传说中的Java学科</p></blockquote></blockquote><h1 id="13、spring容器的依赖注入的注解"><a href="#13、spring容器的依赖注入的注解" class="headerlink" title="13、spring容器的依赖注入的注解"></a>13、spring容器的依赖注入的注解</h1><blockquote><p>注意：</p><blockquote><p>@Resource用到，先在项目中AddLibrary-&gt;<br>MYEclipseLibraries-&gt;JavaEE5Libraries!!!<br>需要在配置文件applicationContext.xml中加入：<br>xmlns:context=”<a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a>“<br><a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a><br>           <a href="http://www.springframework.org/schema/context/spring-context-2.5.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context-2.5.xsd</a><br>注解写法比较简单,但是效率比较低</p><ul><li>xml写法比较复杂，但是效率比较高           </li></ul></blockquote></blockquote><h2 id="13-1Student-java"><a href="#13-1Student-java" class="headerlink" title="13.1Student.java"></a>13.1Student.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Student..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-2Person-java"><a href="#13-2Person-java" class="headerlink" title="13.2Person.java"></a>13.2Person.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//@Resource</span></span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"student"</span>)</span><br><span class="line"><span class="comment">//@Autowired  //按照类型进行匹配</span></span><br><span class="line"><span class="comment">//@Qualifier("student")//按照id匹配，这两项等价于@Resource(name="student")</span></span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3applicationContext-xml"><a href="#13-3applicationContext-xml" class="headerlink" title="13.3applicationContext.xml"></a>13.3applicationContext.xml</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id="person" class="com.wq.di.annotation.Person"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="student" class="com.wq.di.annotation.Student"&gt;&lt;/bean&gt;</span><br><span class="line"> &lt;!-- </span><br><span class="line">   启动依赖注入的注解解析器</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;context:annotation-config&gt;&lt;/context:annotation-config&gt;</span><br></pre></td></tr></table></figure><h2 id="13-4测试类"><a href="#13-4测试类" class="headerlink" title="13.4测试类"></a>13.4测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原理</span></span><br><span class="line"><span class="comment"> *    1、当启动spring容器的时候，创建两个对象</span></span><br><span class="line"><span class="comment"> *    2、当spring容器解析到</span></span><br><span class="line"><span class="comment"> *     &lt;context:annotation-config&gt;&lt;/context:annotation-config&gt;</span></span><br><span class="line"><span class="comment"> *        spring容器会在spring容器管理的bean的范围内查找这些类的属性上面是否加了<span class="doctag">@Resource</span>注解</span></span><br><span class="line"><span class="comment"> *    3、spring解析<span class="doctag">@Resource</span>注解的name属性</span></span><br><span class="line"><span class="comment"> *    如果name属性为""</span></span><br><span class="line"><span class="comment"> *              说明该注解根本没有写name属性</span></span><br><span class="line"><span class="comment"> *              spring容器会得到该注解所在的属性的名称和spring容器中的id做匹配，如果匹配成功，则赋值</span></span><br><span class="line"><span class="comment"> *                                                               如果匹配不成功,则按照类型进行匹配</span></span><br><span class="line"><span class="comment"> *          如果name属性的值不为""</span></span><br><span class="line"><span class="comment"> *               则按照name属性的值和spring的id做匹配，如果匹配成功，则赋值，不成功，则报错</span></span><br><span class="line"><span class="comment"> *   说明:</span></span><br><span class="line"><span class="comment"> *       注解只能用于引用类型</span></span><br><span class="line"><span class="comment"> *       注解写法比较简单,但是效率比较低</span></span><br><span class="line"><span class="comment"> *       xml写法比较复杂，但是效率比较高</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wuqingvika</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_di_annotation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//启动spring容器</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">    ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Person p=(Person)context.getBean(<span class="string">"person"</span>);</span><br><span class="line">    p.getStudent().say();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="14、spring容器的类扫描注解"><a href="#14、spring容器的类扫描注解" class="headerlink" title="14、spring容器的类扫描注解"></a>14、spring容器的类扫描注解</h1><h2 id="14-1Student-java"><a href="#14-1Student-java" class="headerlink" title="14.1Student.java"></a>14.1Student.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Student..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-2Person-java"><a href="#14-2Person-java" class="headerlink" title="14.2Person.java"></a>14.2Person.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"student"</span>)</span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-3applicationContext-xml"><a href="#14-3applicationContext-xml" class="headerlink" title="14.3applicationContext.xml"></a>14.3applicationContext.xml</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">   component:把一个类放入到spring容器中,该类就是一个component</span><br><span class="line">   在base-<span class="keyword">package</span>指定的包及子包下扫描所有的类</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;context:component-scan base-package="com.wq.di.scan"&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><h2 id="14-4测试类"><a href="#14-4测试类" class="headerlink" title="14.4测试类"></a>14.4测试类</h2><ul><li>原理</li></ul><blockquote><p>1、启动spring容器，spring容器解析配置文件</p><p>2、当解析到<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan  base-<span class="keyword">package</span>=<span class="string">"com.wq.di.scan"</span>&gt;</span><br><span class="line">       &lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p> 就会在上面指定的包及子包中扫描所有的类，看哪些类上面有@Component注解</p><blockquote><p>3、如果有该注解，则有如下的规则：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">         <span class="meta">@Component</span></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span></span>&#123;</span><br><span class="line">         &#125;</span><br><span class="line">         ==</span><br><span class="line">         &lt;bean id="personDaoImpl" class"..."/&gt;   id的值：把类的第一个字母变成小写，其他字母不变</span><br><span class="line"> <span class="meta">@Component</span>(<span class="string">"personDao"</span>)</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;bean id=<span class="string">"personDao"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">".."</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>4、按照@Resource注解的规则进行赋值*/</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScanTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld_di_scan</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//启动spring容器</span></span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> </span><br><span class="line">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">Person p=(Person)context.getBean(<span class="string">"person"</span>);</span><br><span class="line">p.getStudent().say();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="15、spring容器的类扫描实现document"><a href="#15、spring容器的类扫描实现document" class="headerlink" title="15、spring容器的类扫描实现document"></a>15、spring容器的类扫描实现document</h1><h2 id="15-1DocumentManager-java"><a href="#15-1DocumentManager-java" class="headerlink" title="15.1DocumentManager.java"></a>15.1DocumentManager.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"documentManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentManager</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"wordDocument"</span>)<span class="comment">//这里赋值为wordDocument哦。</span></span><br><span class="line"><span class="keyword">private</span> Document document;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document.readDocument();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.document.writeDocument();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-2WordDucument-java"><a href="#15-2WordDucument-java" class="headerlink" title="15.2WordDucument.java"></a>15.2WordDucument.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"wordDocument"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordDocument</span> <span class="keyword">implements</span> <span class="title">Document</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Word Write"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDocument</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"Word read"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PdfDocument.java和ExcelDocument.java同理。</p></blockquote><h2 id="15-3applicationContext-xml"><a href="#15-3applicationContext-xml" class="headerlink" title="15.3applicationContext.xml"></a>15.3applicationContext.xml</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    &lt;context:component-scan base-package="com.wq.spring.iocdi"&gt;&lt;/context:component-scan&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt;注意:base-<span class="keyword">package</span>为要扫描的类的包名。</span><br><span class="line"></span><br><span class="line"><span class="number">15.4</span>测试方法</span><br><span class="line">--------</span><br><span class="line">```java</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDocument_Spring</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context=</span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    DocumentManager dm=(DocumentManager) context.getBean(<span class="string">"documentManager"</span>);</span><br><span class="line">    dm.writeDocument();</span><br><span class="line">    dm.readDocument();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="16、spring容器的类扫描实现mvc"><a href="#16、spring容器的类扫描实现mvc" class="headerlink" title="16、spring容器的类扫描实现mvc"></a>16、spring容器的类扫描实现mvc</h1><h2 id="16-1配置文件"><a href="#16-1配置文件" class="headerlink" title="16.1配置文件"></a>16.1配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-package="com.wq.spring"&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><h2 id="16-2PersonDao-java-接口"><a href="#16-2PersonDao-java-接口" class="headerlink" title="16.2PersonDao.java(接口)"></a>16.2PersonDao.java(接口)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.spring.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-3PersonDaoImpl-java-实现类"><a href="#16-3PersonDaoImpl-java-实现类" class="headerlink" title="16.3PersonDaoImpl.java(实现类)"></a>16.3PersonDaoImpl.java(实现类)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储层</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"personDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"save person wqhahahaha..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-4PersonService-java-接口"><a href="#16-4PersonService-java-接口" class="headerlink" title="16.4PersonService.java(接口)"></a>16.4PersonService.java(接口)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wq.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-5PersonServiceImpl-java-实现"><a href="#16-5PersonServiceImpl-java-实现" class="headerlink" title="16.5PersonServiceImpl.java(实现)"></a>16.5PersonServiceImpl.java(实现)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务层</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"personService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceImpl</span> <span class="keyword">implements</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersonDao <span class="title">getPersonDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> personDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonDao</span><span class="params">(PersonDao personDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personDao = personDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.personDao.savePerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-6PersonAction-java"><a href="#16-6PersonAction-java" class="headerlink" title="16.6PersonAction.java"></a>16.6PersonAction.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//展示层</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"personAction"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAciton</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"personService"</span>)</span><br><span class="line"><span class="keyword">private</span> PersonService personService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personService.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-7测试类"><a href="#16-7测试类" class="headerlink" title="16.7测试类"></a>16.7测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMvc</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PersonAciton personAction=(PersonAciton)context.getBean(<span class="string">"personAction"</span>);</span><br><span class="line">personAction.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Spring学习笔记」第一篇,具体内容可见右侧内容概要，&lt;font color=&quot;red&quot;&gt;【本文长期更新】&lt;/font&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="后端开发" scheme="https://wuqingvika.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Spring" scheme="https://wuqingvika.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】Spring入门篇（二）spring代理设置</title>
    <link href="https://wuqingvika.github.io/2016/06/20/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91-spring-2/"/>
    <id>https://wuqingvika.github.io/2016/06/20/后端开发-spring-2/</id>
    <published>2016-06-20T13:18:25.000Z</published>
    <updated>2017-11-28T13:20:53.679Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文是我的「Spring学习笔记」第二篇,具体内容可见右侧内容概要，<font color="red">【本文长期更新】</font>。</p><a id="more"></a><h1 id="1、静态代理模式"><a href="#1、静态代理模式" class="headerlink" title="1、静态代理模式"></a>1、静态代理模式</h1><blockquote><p>PersonDao.java(接口)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>PersonDaoImpl(实现类)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"save Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PersonDaoProxy.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoProxy</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line">PersonDao personDao;</span><br><span class="line">Transaction transaction;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PersonDaoProxy</span><span class="params">(PersonDao personDao, Transaction transaction)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.personDao = personDao;</span><br><span class="line"><span class="keyword">this</span>.transaction = transaction;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、开启事务</span></span><br><span class="line"><span class="comment"> * 2、执行目标方法</span></span><br><span class="line"><span class="comment"> * 3、事务提交</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">transaction.beginTransaction();</span><br><span class="line">personDao.savePerson();</span><br><span class="line">transaction.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Transaction<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"begin transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"commit.."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ProxyTest<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">PersonDao personDao=<span class="keyword">new</span> PersonDaoImpl();</span><br><span class="line">Transaction transaction=<span class="keyword">new</span> Transaction();</span><br><span class="line">PersonDaoProxy proxy=<span class="keyword">new</span> PersonDaoProxy(personDao, transaction);</span><br><span class="line">proxy.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="2、jdk的动态代理"><a href="#2、jdk的动态代理" class="headerlink" title="2、jdk的动态代理"></a>2、jdk的动态代理</h1><h2 id="2-1PersonDao-java-接口"><a href="#2-1PersonDao-java-接口" class="headerlink" title="2.1PersonDao.java(接口)"></a>2.1PersonDao.java(接口)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2PersonDaoImpl-java-实现类"><a href="#2-2PersonDaoImpl-java-实现类" class="headerlink" title="2.2PersonDaoImpl.java(实现类)"></a>2.2PersonDaoImpl.java(实现类)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"save Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3Transaction"><a href="#2-3Transaction" class="headerlink" title="2.3Transaction"></a>2.3Transaction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"begin transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"commit.."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4MyInterceptor"><a href="#2-4MyInterceptor" class="headerlink" title="2.4MyInterceptor"></a>2.4MyInterceptor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Transaction transation;</span><br><span class="line"><span class="keyword">private</span> Object target;<span class="comment">//目标类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyInterceptor</span><span class="params">(Transaction transation, Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.transation = transation;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">String methodName=method.getName();</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"savePerson"</span>.equals(methodName)||<span class="string">"updatePerson"</span>.equals(methodName)</span><br><span class="line">||<span class="string">"deletePerson"</span>.equals(methodName))&#123;</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">this</span>.transation.beginTransaction();</span><br><span class="line">method.invoke(target);<span class="comment">//调用目标方法</span></span><br><span class="line"><span class="keyword">this</span>.transation.commit();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">method.invoke(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5测试方法"><a href="#2-5测试方法" class="headerlink" title="2.5测试方法"></a>2.5测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJdkProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、创建一个目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Object target=<span class="keyword">new</span> PersonDaoImpl();</span><br><span class="line">Transaction transaction=<span class="keyword">new</span> Transaction();</span><br><span class="line">MyInterceptor interceptor=<span class="keyword">new</span> MyInterceptor(transaction, target);</span><br><span class="line">PersonDao personDao=(PersonDao) Proxy.newProxyInstance(</span><br><span class="line">target.getClass().getClassLoader(), </span><br><span class="line">target.getClass().getInterfaces(), interceptor);</span><br><span class="line">personDao.savePerson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、项目二的优化。"><a href="#3、项目二的优化。" class="headerlink" title="3、项目二的优化。"></a>3、项目二的优化。</h1><h2 id="3-1PersonDao"><a href="#3-1PersonDao" class="headerlink" title="3.1PersonDao"></a>3.1PersonDao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2PersonDaoImpl"><a href="#3-2PersonDaoImpl" class="headerlink" title="3.2PersonDaoImpl"></a>3.2PersonDaoImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"save Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3Transaction"><a href="#3-3Transaction" class="headerlink" title="3.3Transaction"></a>3.3Transaction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span>  <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4MyInterceptor"><a href="#3-4MyInterceptor" class="headerlink" title="3.4MyInterceptor"></a>3.4MyInterceptor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Interceptor&gt; interceptors;</span><br><span class="line"><span class="keyword">private</span> Object target;<span class="comment">//目标类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyInterceptor</span><span class="params">(Object target,  List&lt;Interceptor&gt; interceptors)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.interceptors = interceptors;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Interceptor interceptor : interceptors) &#123;</span><br><span class="line">interceptor.interceptor();</span><br><span class="line">&#125;</span><br><span class="line">method.invoke(target);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5Interceptor"><a href="#3-5Interceptor" class="headerlink" title="3.5Interceptor"></a>3.5Interceptor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interceptor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6测试类"><a href="#3-6测试类" class="headerlink" title="3.6测试类"></a>3.6测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJdkProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、创建一个目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Object target=<span class="keyword">new</span> PersonDaoImpl();</span><br><span class="line">Transaction transaction=<span class="keyword">new</span> Transaction();</span><br><span class="line">List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;Interceptor&gt;();</span><br><span class="line">interceptors.add(transaction);</span><br><span class="line">MyInterceptor interceptor=<span class="keyword">new</span> MyInterceptor(target, interceptors);</span><br><span class="line">PersonDao personDao=(PersonDao) Proxy.newProxyInstance(</span><br><span class="line">target.getClass().getClassLoader(), </span><br><span class="line">target.getClass().getInterfaces(), interceptor);</span><br><span class="line">personDao.updatePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、jdkproxy-salary"><a href="#4、jdkproxy-salary" class="headerlink" title="4、jdkproxy-salary"></a>4、jdkproxy-salary</h1><h2 id="4-1SalaryManager"><a href="#4-1SalaryManager" class="headerlink" title="4.1SalaryManager"></a>4.1SalaryManager</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SalaryManager</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSalary</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2SalaryManagerImpl"><a href="#4-2SalaryManagerImpl" class="headerlink" title="4.2SalaryManagerImpl"></a>4.2SalaryManagerImpl</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SalaryManagerImpl implements SalaryManager &#123;</span><br><span class="line">@Override</span><br><span class="line">public void showSalary() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;您的工资为10W&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3Logger"><a href="#4-3Logger" class="headerlink" title="4.3Logger"></a>4.3Logger</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Logging</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"日志信息。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4Security"><a href="#4-4Security" class="headerlink" title="4.4Security"></a>4.4Security</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Security</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">security</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"security"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5Privilege"><a href="#4-5Privilege" class="headerlink" title="4.5Privilege"></a>4.5Privilege</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Privilege</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String access;<span class="comment">//权限</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> access;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccess</span><span class="params">(String access)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.access = access;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6MyInterceptor"><a href="#4-6MyInterceptor" class="headerlink" title="4.6MyInterceptor"></a>4.6MyInterceptor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"><span class="keyword">private</span> Logger logger;</span><br><span class="line"><span class="keyword">private</span> Privilege privilege;</span><br><span class="line"><span class="keyword">private</span> Security security;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyInterceptor</span><span class="params">(Object target, Logger logger, Privilege privilege,</span></span></span><br><span class="line"><span class="function"><span class="params">Security security)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line"><span class="keyword">this</span>.logger = logger;</span><br><span class="line"><span class="keyword">this</span>.privilege = privilege;</span><br><span class="line"><span class="keyword">this</span>.security = security;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、启动日志</span></span><br><span class="line"><span class="comment"> * 2、启动安全性的类</span></span><br><span class="line"><span class="comment"> * 3、验证权限</span></span><br><span class="line"><span class="comment"> *      调用目标对象的目标方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">this</span>.logger.Logging();</span><br><span class="line"><span class="keyword">this</span>.security.security();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"wuqingvika"</span>.equals(<span class="keyword">this</span>.privilege.getAccess()))&#123;</span><br><span class="line">    method.invoke(target);<span class="comment">//执行目标方法</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"no access!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7测试方法"><a href="#4-7测试方法" class="headerlink" title="4.7测试方法"></a>4.7测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSalary</span><span class="params">()</span></span>&#123;</span><br><span class="line"> Object target=<span class="keyword">new</span> SalaryManagerImpl();</span><br><span class="line"> Logger logger=<span class="keyword">new</span> Logger();</span><br><span class="line"> Privilege privilege=<span class="keyword">new</span> Privilege();</span><br><span class="line"> privilege.setAccess(<span class="string">"wuqingvika"</span>);</span><br><span class="line"> Security security=<span class="keyword">new</span> Security();</span><br><span class="line"> MyInterceptor interceptor=<span class="keyword">new</span> MyInterceptor</span><br><span class="line"> (target, logger, privilege, security);</span><br><span class="line">SalaryManager sm= (SalaryManager) Proxy.newProxyInstance(target.getClass().getClassLoader(), </span><br><span class="line"> target.getClass().getInterfaces(), interceptor);</span><br><span class="line"> sm.showSalary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、spring-cglibproxy"><a href="#5、spring-cglibproxy" class="headerlink" title="5、spring-cglibproxy"></a>5、spring-cglibproxy</h1><blockquote><p>注：<br>要导入Jar包哦。cglib-nodep-2.1_3.jar包。</p></blockquote><h2 id="5-1PersonDaoImpl"><a href="#5-1PersonDaoImpl" class="headerlink" title="5.1PersonDaoImpl"></a>5.1PersonDaoImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"save Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2Transaction"><a href="#5-2Transaction" class="headerlink" title="5.2Transaction"></a>5.2Transaction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"begin transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"commit.."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3MyInterceptor"><a href="#5-3MyInterceptor" class="headerlink" title="5.3MyInterceptor"></a>5.3MyInterceptor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Transaction transation;</span><br><span class="line"><span class="keyword">private</span> Object target;<span class="comment">//目标类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyInterceptor</span><span class="params">(Transaction transation, Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.transation = transation;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码增强类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);<span class="comment">//参数为拦截器</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method method, Object[] arg2,</span></span></span><br><span class="line"><span class="function"><span class="params">MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.transation.beginTransaction();</span><br><span class="line">method.invoke(target);</span><br><span class="line"><span class="keyword">this</span>.transation.commit();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4CglibProxyTest"><a href="#5-4CglibProxyTest" class="headerlink" title="5.4CglibProxyTest"></a>5.4CglibProxyTest</h2><blockquote><p>通过cglib产生的代理对象，代理类是目标类的子类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCglibProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"> Transaction transation=<span class="keyword">new</span> Transaction();</span><br><span class="line"> Object target=<span class="keyword">new</span> PersonDaoImpl();<span class="comment">//目标类</span></span><br><span class="line"> MyInterceptor interceptor=</span><br><span class="line"> <span class="keyword">new</span> MyInterceptor(transation, target);</span><br><span class="line"> PersonDaoImpl personDaoImpl=</span><br><span class="line"> (PersonDaoImpl) interceptor.createProxy();</span><br><span class="line"> personDaoImpl.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="6、springAOP的第一个例子"><a href="#6、springAOP的第一个例子" class="headerlink" title="6、springAOP的第一个例子"></a>6、springAOP的第一个例子</h1><blockquote><p>注：</p><blockquote><p>此例是需要新添加两个jar包。<br>aspectjrt.jar和aspectjweaver.jar。<br>另外：配置文件也要更改哦。</p><h2 id="6-1PersonDao"><a href="#6-1PersonDao" class="headerlink" title="6.1PersonDao"></a>6.1PersonDao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></blockquote><h2 id="6-2PersonDaoImpl"><a href="#6-2PersonDaoImpl" class="headerlink" title="6.2PersonDaoImpl"></a>6.2PersonDaoImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"save Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update Person()..."</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3Transaction"><a href="#6-3Transaction" class="headerlink" title="6.3Transaction"></a>6.3Transaction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"begin transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"commit.."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4配置文件"><a href="#6-4配置文件" class="headerlink" title="6.4配置文件"></a>6.4配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">   xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span><br><span class="line"><span class="string">   http://www.springframework.org/schema/aop </span></span><br><span class="line"><span class="string">           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"</span>&gt;</span><br><span class="line">&lt;bean id="personDao" class="com.wq.aop.xml.PersonDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="transaction" class="com.wq.aop.xml.Transaction"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">  切入点表达式  确定目标类</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;aop:pointcut expression=<span class="string">"execution(* com.wq.aop.xml.PersonDaoImpl.*(..))"</span></span><br><span class="line">    id=<span class="string">"perform"</span>/&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">  ref指向的对象就是切面</span><br><span class="line">   --&gt;</span><br><span class="line">    &lt;aop:aspect ref=<span class="string">"transaction"</span>&gt;</span><br><span class="line">    &lt;aop:before method=<span class="string">"beginTransaction"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</span><br><span class="line">    &lt;aop:after-returning method=<span class="string">"commit"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="6-5测试类"><a href="#6-5测试类" class="headerlink" title="6.5测试类"></a>6.5测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PersonDao personDao=(PersonDao) context.getBean(<span class="string">"personDao"</span>);</span><br><span class="line">personDao.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7、Spring通知aop-xml-advise"><a href="#7、Spring通知aop-xml-advise" class="headerlink" title="7、Spring通知aop-xml-advise"></a>7、Spring通知aop-xml-advise</h1><h2 id="7-1PersonDao"><a href="#7-1PersonDao" class="headerlink" title="7.1PersonDao"></a>7.1PersonDao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2PersonDaoImpl"><a href="#7-2PersonDaoImpl" class="headerlink" title="7.2PersonDaoImpl"></a>7.2PersonDaoImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int i=1/0;</span></span><br><span class="line">System.out.println(<span class="string">"save Person()..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"吴庆加油"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update Person()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3Transaction"><a href="#7-3Transaction" class="headerlink" title="7.3Transaction"></a>7.3Transaction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前置通知</span></span><br><span class="line"><span class="comment"> *  在目标方法执行之前</span></span><br><span class="line"><span class="comment"> * 参数：连接点(joinpoint)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">String methodName=joinPoint.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">"连接点的名称:"</span>+methodName);</span><br><span class="line">System.out.println(<span class="string">"目标类:"</span>+joinPoint.getTarget().getClass());</span><br><span class="line">System.out.println(<span class="string">"begin transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(JoinPoint joinPoint,Object val)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"目标方法的返回值:"</span>+val);</span><br><span class="line">System.out.println(<span class="string">"commit.."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finallyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"final.."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwsMethod</span><span class="params">(JoinPoint joinPoint,Throwable ex)</span></span>&#123;</span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环绕通知</span></span><br><span class="line"><span class="comment"> *   joinPoint.proceed();这个代码如果在环绕通知中不写，则目标方法不再执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"wquqiqiqi"</span>);</span><br><span class="line">joinPoint.proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4配置文件"><a href="#7-4配置文件" class="headerlink" title="7.4配置文件"></a>7.4配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id="personDao" class="com.wq.aop.xml.PersonDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="transaction" class="com.wq.aop.xml.Transaction"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">  切入点表达式  确定目标类</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;aop:pointcut expression=<span class="string">"execution(* com.wq.aop.xml.PersonDaoImpl.*(..))"</span></span><br><span class="line">    id=<span class="string">"perform"</span>/&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">  ref指向的对象就是切面</span><br><span class="line">   --&gt;</span><br><span class="line">    &lt;aop:aspect ref=<span class="string">"transaction"</span>&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">      前置通知</span><br><span class="line">         <span class="number">1</span>、在目标方法执行之前</span><br><span class="line">         <span class="number">2</span>、获取不到目标方法的返回值</span><br><span class="line">       --&gt;</span><br><span class="line">    &lt;aop:before method=<span class="string">"beginTransaction"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">      后置通知</span><br><span class="line">         <span class="number">1</span>、后置通知可以获取到目标方法的返回值</span><br><span class="line">         <span class="number">2</span>、当目标方法抛出异常，后置通知将不再执行</span><br><span class="line">       --&gt;</span><br><span class="line">    &lt;aop:after-returning method=<span class="string">"commit"</span> pointcut-ref=<span class="string">"perform"</span> returning=<span class="string">"val"</span>/&gt;</span><br><span class="line">    &lt;aop:after method=<span class="string">"finallyMethod"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</span><br><span class="line">    &lt;aop:after-throwing method=<span class="string">"throwsMethod"</span> pointcut-ref=<span class="string">"perform"</span> throwing=<span class="string">"ex"</span> /&gt;</span><br><span class="line">   &lt;aop:around method=<span class="string">"aroundMethod"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="7-5测试方法"><a href="#7-5测试方法" class="headerlink" title="7.5测试方法"></a>7.5测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PersonDao personDao=(PersonDao) context.getBean(<span class="string">"personDao"</span>);</span><br><span class="line">personDao.savePerson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8、利用springAOP捕捉异常"><a href="#8、利用springAOP捕捉异常" class="headerlink" title="8、利用springAOP捕捉异常"></a>8、利用springAOP捕捉异常</h1><h2 id="8-1PersonDao"><a href="#8-1PersonDao" class="headerlink" title="8.1PersonDao"></a>8.1PersonDao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2PersonDaoImpl"><a href="#8-2PersonDaoImpl" class="headerlink" title="8.2PersonDaoImpl"></a>8.2PersonDaoImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDaoImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"save Person()..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"吴庆加油"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update Person()..."</span>);</span><br><span class="line">Long.parseLong(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3PersonService"><a href="#8-3PersonService" class="headerlink" title="8.3PersonService"></a>8.3PersonService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4PersonServiceImpl"><a href="#8-4PersonServiceImpl" class="headerlink" title="8.4PersonServiceImpl"></a>8.4PersonServiceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceImpl</span> <span class="keyword">implements</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> PersonDao <span class="title">getPersonDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> personDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonDao</span><span class="params">(PersonDao personDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personDao = personDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">personDao.savePerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">personDao.updatePerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-5ExceptionAspect"><a href="#8-5ExceptionAspect" class="headerlink" title="8.5ExceptionAspect"></a>8.5ExceptionAspect</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwException</span><span class="params">(JoinPoint joinPoint,Throwable ex)</span></span>&#123;</span><br><span class="line">System.out.println(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6配置文件"><a href="#8-6配置文件" class="headerlink" title="8.6配置文件"></a>8.6配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id="personDao" class="com.wq.aop.xml.exception.dao.impl.PersonDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"personService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.aop.xml.exception.service.impl.PersonServiceImpl"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"personDao"</span>&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"personDao"</span>/&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id="exceptionAspect" class="com.wq.aop.xml.exception.except.ExceptionAspect"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* com.wq.aop.xml.exception.service.impl.*.*(..))"</span> </span><br><span class="line">id=<span class="string">"perform"</span>/&gt;</span><br><span class="line">&lt;aop:aspect ref=<span class="string">"exceptionAspect"</span>&gt;</span><br><span class="line">&lt;aop:after-throwing method=<span class="string">"throwException"</span> pointcut-ref=<span class="string">"perform"</span> throwing=<span class="string">"ex"</span>/&gt;</span><br><span class="line">&lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="8-7测试方法"><a href="#8-7测试方法" class="headerlink" title="8.7测试方法"></a>8.7测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testException</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PersonService ps=(PersonService) context.getBean(<span class="string">"personService"</span>);</span><br><span class="line">ps.updatePerson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9、利用springAOP处理权限"><a href="#9、利用springAOP处理权限" class="headerlink" title="9、利用springAOP处理权限"></a>9、利用springAOP处理权限</h1><h2 id="9-1PersonService"><a href="#9-1PersonService" class="headerlink" title="9.1PersonService"></a>9.1PersonService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-2PersonServiceImpl"><a href="#9-2PersonServiceImpl" class="headerlink" title="9.2PersonServiceImpl"></a>9.2PersonServiceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceImpl</span> <span class="keyword">implements</span> <span class="title">PersonService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PrivilegeInfo</span>(name=<span class="string">"savePerson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"save person中。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PrivilegeInfo</span>(name=<span class="string">"updatePerson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update person中。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3Privilege"><a href="#9-3Privilege" class="headerlink" title="9.3Privilege"></a>9.3Privilege</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Privilege</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4PrivilegeInfo自定义注解"><a href="#9-4PrivilegeInfo自定义注解" class="headerlink" title="9.4PrivilegeInfo自定义注解"></a>9.4PrivilegeInfo自定义注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PrivilegeInfo &#123;</span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-5注解解析器"><a href="#9-5注解解析器" class="headerlink" title="9.5注解解析器"></a>9.5注解解析器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationParse</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * targetClass  目标类的class形式</span></span><br><span class="line"><span class="comment"> * methodName  在客户端调用哪个方法，methodName就代表哪个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parse</span><span class="params">(Class targetClass,String methodName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String methodAccess=<span class="string">""</span>;</span><br><span class="line">Method method=targetClass.getMethod(methodName);</span><br><span class="line"><span class="comment">//判断方法上面是否存在PrivilegeInfo注解</span></span><br><span class="line"><span class="keyword">if</span>(method.isAnnotationPresent(PrivilegeInfo.class))&#123;</span><br><span class="line">PrivilegeInfo privilegeInfo=method.getAnnotation(PrivilegeInfo.class);</span><br><span class="line">methodAccess=privilegeInfo.name();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> methodAccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-6环绕通知PrivilegeAspect"><a href="#9-6环绕通知PrivilegeAspect" class="headerlink" title="9.6环绕通知PrivilegeAspect"></a>9.6环绕通知PrivilegeAspect</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeAspect</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户拥有的权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Privilege&gt; privileges=<span class="keyword">new</span> ArrayList&lt;Privilege&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Privilege&gt; <span class="title">getPrivileges</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> privileges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrivileges</span><span class="params">(List&lt;Privilege&gt; privileges)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.privileges = privileges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isAccessMethod</span><span class="params">(ProceedingJoinPoint joinpoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、获取访问目标方法应该具备的权限</span></span><br><span class="line"><span class="comment"> *     得到</span></span><br><span class="line"><span class="comment"> *        1、目标类的class形式</span></span><br><span class="line"><span class="comment"> *        2、方法的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">Class targetClass=joinpoint.getTarget().getClass();</span><br><span class="line">String methodName=joinpoint.getSignature().getName();</span><br><span class="line"><span class="comment">//得到访问该方法的权限</span></span><br><span class="line">String methodAccess=AnnotationParse.parse(targetClass, methodName);</span><br><span class="line"><span class="keyword">for</span> (Privilege p : privileges) &#123;</span><br><span class="line"><span class="keyword">if</span>((p.getName()).equals(methodAccess))&#123;</span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">joinpoint.proceed();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"对不起，你没有访问权限！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-7配置文件"><a href="#9-7配置文件" class="headerlink" title="9.7配置文件"></a>9.7配置文件</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id="personService" class="com.wq.privilege.service.impl.PersonServiceImpl"&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id="privilegeAspect" class="com.wq.privilege.aspect.PrivilegeAspect"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:pointcut </span><br><span class="line">expression=<span class="string">"execution(* com.wq.privilege.service.impl.*.*(..))"</span> </span><br><span class="line">id=<span class="string">"perform"</span>/&gt;</span><br><span class="line">&lt;aop:aspect ref=<span class="string">"privilegeAspect"</span>&gt;</span><br><span class="line">&lt;aop:around method=<span class="string">"isAccessMethod"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</span><br><span class="line">&lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="9-8测试类"><a href="#9-8测试类" class="headerlink" title="9.8测试类"></a>9.8测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrivilege</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PrivilegeAspect pa=(PrivilegeAspect) context.getBean(<span class="string">"privilegeAspect"</span>);</span><br><span class="line">Privilege p1=<span class="keyword">new</span> Privilege();</span><br><span class="line">p1.setName(<span class="string">"savePerson"</span>);</span><br><span class="line">Privilege p2=<span class="keyword">new</span> Privilege();</span><br><span class="line">p2.setName(<span class="string">"updatePerson"</span>);</span><br><span class="line">pa.getPrivileges().add(p1);</span><br><span class="line">pa.getPrivileges().add(p2);</span><br><span class="line">PersonService personService=(PersonService) context.getBean(<span class="string">"personService"</span>);</span><br><span class="line">personService.updatePerson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10、springAOP计算每一层方法的调用次数"><a href="#10、springAOP计算每一层方法的调用次数" class="headerlink" title="10、springAOP计算每一层方法的调用次数"></a>10、springAOP计算每一层方法的调用次数</h1><h2 id="10-1PersonDaoImpl"><a href="#10-1PersonDaoImpl" class="headerlink" title="10.1PersonDaoImpl"></a>10.1PersonDaoImpl</h2><blockquote><p>personDao省略。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"save person...1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="10-2PersonServiceImpl"><a href="#10-2PersonServiceImpl" class="headerlink" title="10.2PersonServiceImpl"></a>10.2PersonServiceImpl</h2><p>PersonService省略。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceImpl</span> <span class="keyword">implements</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersonDao <span class="title">getPersonDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> personDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonDao</span><span class="params">(PersonDao personDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personDao = personDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personDao.savePerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="10-3PersonAction"><a href="#10-3PersonAction" class="headerlink" title="10.3PersonAction"></a>10.3PersonAction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAction</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> PersonService personService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersonService <span class="title">getPersonService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> personService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonService</span><span class="params">(PersonService personService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personService = personService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePerson</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.personService.savePerson();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4TimeAspect"><a href="#10-4TimeAspect" class="headerlink" title="10.4TimeAspect"></a>10.4TimeAspect</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAspect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExcutionTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">String targetClassName=joinPoint.getTarget().getClass().getName();</span><br><span class="line">String methodName=joinPoint.getSignature().getName();</span><br><span class="line">Long preTime=System.currentTimeMillis();</span><br><span class="line">joinPoint.proceed();</span><br><span class="line">Long nextTime=System.currentTimeMillis();</span><br><span class="line">Long executionTime=nextTime-preTime;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(<span class="string">"当前的类是:"</span>+targetClassName+<span class="string">","</span>);</span><br><span class="line">System.out.print(<span class="string">"当前的方法是:"</span>+methodName+<span class="string">","</span>);</span><br><span class="line">System.out.print(<span class="string">"当前方法的开始时间:"</span>+preTime+<span class="string">","</span>);</span><br><span class="line">System.out.println(<span class="string">"当前方法的执行时间:"</span>+executionTime);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5配置文件"><a href="#10-5配置文件" class="headerlink" title="10.5配置文件"></a>10.5配置文件</h2> <figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id="personDao" class="com.wq.dao.impl.PersonDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">      &lt;bean id=<span class="string">"personService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.service.impl.PersonServiceImpl"</span>&gt;</span><br><span class="line">       &lt;property name=<span class="string">"personDao"</span>&gt;</span><br><span class="line">       &lt;ref bean=<span class="string">"personDao"</span>/&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">      &lt;bean id=<span class="string">"personAction"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wq.action.PersonAction"</span>&gt;</span><br><span class="line">      &lt;property name=<span class="string">"personService"</span>&gt;</span><br><span class="line">      &lt;ref bean=<span class="string">"personService"</span>/&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">      &lt;bean id="timeAspect" class="com.wq.aspect.TimeAspect"&gt;&lt;/bean&gt;</span><br><span class="line">      &lt;aop:config&gt;</span><br><span class="line">      &lt;aop:pointcut expression=<span class="string">"execution(* com.wq..*.*(..))"</span> id=<span class="string">"perform"</span>/&gt;</span><br><span class="line">      &lt;aop:aspect ref=<span class="string">"timeAspect"</span>&gt;</span><br><span class="line">      &lt;aop:around method=<span class="string">"ExcutionTime"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</span><br><span class="line">      &lt;/aop:aspect&gt;</span><br><span class="line">      &lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="10-6测试方法"><a href="#10-6测试方法" class="headerlink" title="10.6测试方法"></a>10.6测试方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecutionTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context=</span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PersonAction personAction=(PersonAction) context.getBean(<span class="string">"personAction"</span>);</span><br><span class="line">personAction.savePerson();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我的「Spring学习笔记」第二篇,具体内容可见右侧内容概要，&lt;font color=&quot;red&quot;&gt;【本文长期更新】&lt;/font&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="后端开发" scheme="https://wuqingvika.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Spring" scheme="https://wuqingvika.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
